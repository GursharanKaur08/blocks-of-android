[
  {
    "title": "ViewModel",
    "heading": "h1",
    "content": "\n<p>The <code>ViewModel</code> class is designed to store and manage UI-related data in a lifecycle conscious way. The <code>ViewModel</code> class allows data to survive configuration changes such as screen rotations.\nThe Android framework manages the lifecycles of UI controllers, such as activities and fragments. The framework may decide to destroy or re-create a UI controller in response to certain user actions or device events that are completely out of your control.</p>\n<p>If the system destroys or re-creates a UI controller, any transient UI-related data you store in them is lost. For example, your app may include a list of users in one of its activities. When the activity is re-created for a configuration change, the new activity has to re-fetch the list of users. For simple data, the activity can use the <code>onSaveInstanceState()</code> method and restore its data from the bundle in <code>onCreate()</code>, but this approach is only suitable for small amounts of data that can be serialized then deserialized, not for potentially large amounts of data like a list of users or bitmaps.</p>\n<p>Another problem is that UI controllers frequently need to make asynchronous calls that may take some time to return. The UI controller needs to manage these calls and ensure the system cleans them up after it&#39;s destroyed to avoid potential memory leaks. This management requires a lot of maintenance, and in the case where the object is re-created for a configuration change, it&#39;s a waste of resources since the object may have to reissue calls it has already made.</p>\n<p>UI controllers such as activities and fragments are primarily intended to display UI data, react to user actions, or handle operating system communication, such as permission requests. Requiring UI controllers to also be responsible for loading data from a database or network adds bloat to the class. Assigning excessive responsibility to UI controllers can result in a single class that tries to handle all of an app&#39;s work by itself, instead of delegating work to other classes. Assigning excessive responsibility to the UI controllers in this way also makes testing a lot harder.\nIt&#39;s easier and more efficient to separate out view data ownership from UI controller logic.</p>\n<h4>Implement a ViewModel</h4>\n<p>Architecture Components provides <code>ViewModel</code> helper class for the UI controller that is responsible for preparing data for the UI. <code>ViewModel</code> objects are automatically retained during configuration changes so that data they hold is immediately available to the next activity or fragment instance. For example, if you need to display a list of users in your app, make sure to assign responsibility to acquire and keep the list of users to a <code>ViewModel</code>, instead of an activity or fragment, as illustrated by the following sample code:</p>\n<pre><code class=\"lang-kotlin\">class MyViewModel : ViewModel() {\n    private lateinit var users: MutableLiveData&lt;List&lt;User&gt;&gt;\n\n    fun getUsers(): LiveData&lt;List&lt;User&gt;&gt; {\n        if (!::users.isInitialized) {\n            users = MutableLiveData()\n            loadUsers()\n        }\n        return users\n    }\n\n    private fun loadUsers() {\n        // Do an asynchronous operation to fetch users.\n    }\n}\n</code></pre>\n<p>You can then access the list from an activity as follows:</p>\n<pre><code class=\"lang-kotlin\">class MyActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        // Create a ViewModel the first time the system calls an activity&#39;s onCreate() method.\n        // Re-created activities receive the same MyViewModel instance created by the first activity.\n\n        val model = ViewModelProviders.of(this).get(MyViewModel::class.java)\n        model.getUsers().observe(this, Observer&lt;List&lt;User&gt;&gt;{ users -&gt;\n            // update UI\n        })\n    }\n}\n</code></pre>\n<p>If the activity is re-created, it receives the same <code>MyViewModel</code> instance that was created by the first activity. When the owner activity is finished, the framework calls the <code>ViewModel</code> objects&#39;s <code>onCleared()</code> method so that it can clean up resources.\n<code>ViewModel</code> objects are designed to outlive specific instantiations of views or <code>LifecycleOwners</code>. This design also means you can write tests to cover a <code>ViewModel</code> more easily as it doesn&#39;t know about view and <code>Lifecycle</code> objects. <code>ViewModel</code> objects can contain <code>LifecycleObservers</code>, such as <code>LiveData</code> objects. However <code>ViewModel</code> objects must never observe changes to lifecycle-aware observables, such as <code>LiveData</code> objects. If the <code>ViewModel</code> needs the <code>Application</code> context, for example to find a system service, it can extend the <code>AndroidViewModel</code> class and have a constructor that receives the <code>Application</code> in the constructor, since <code>Application</code> class extends <code>Context</code>.</p>\n<h4>The lifecycle of a ViewModel</h4>\n<p><code>ViewModel</code> objects are scoped to the <code>Lifecycle</code> passed to the <code>ViewModelProvider</code> when getting the <code>ViewModel</code>. The <code>ViewModel</code> remains in memory until the <code>Lifecycle</code> it&#39;s scoped to goes away permanently: in the case of an activity, when it finishes, while in the case of a fragment, when it&#39;s detached.</p>\n<p>Figure 1 illustrates the various lifecycle states of an activity as it undergoes a rotation and then is finished. The illustration also shows the lifetime of the <code>ViewModel</code> next to the associated activity lifecycle. This particular diagram illustrates the states of an activity. The same basic states apply to the lifecycle of a fragment.\nYou usually request a <code>ViewModel</code> the first time the system calls an activity object&#39;s onCreate() method. The system may call <code>onCreate()</code> several times throughout the life of an activity, such as when a device screen is rotated. The <code>ViewModel</code> exists from when you first request a <code>ViewModel</code> until the activity is finished and destroyed.</p>\n<h4>Share data between fragments</h4>\n<p>It&#39;s very common that two or more fragments in an activity need to communicate with each other. Imagine a common case of master-detail fragments, where you have a fragment in which the user selects an item from a list and another fragment that displays the contents of the selected item. This case is never trivial as both fragments need to define some interface description, and the owner activity must bind the two together. In addition, both fragments must handle the scenario where the other fragment is not yet created or visible.</p>\n<p>This common pain point can be addressed by using <code>ViewModel</code> objects. These fragments can share a <code>ViewModel</code> using their activity scope to handle this communication, as illustrated by the following sample code:</p>\n<pre><code class=\"lang-kotlin\">class SharedViewModel : ViewModel() {\n    val selected = MutableLiveData&lt;Item&gt;()\n\n    fun select(item: Item) {\n        selected.value = item\n    }\n}\n\nclass MasterFragment : Fragment() {\n\n    private lateinit var itemSelector: Selector\n\n    private lateinit var model: SharedViewModel\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        model = activity?.run {\n            ViewModelProviders.of(this).get(SharedViewModel::class.java)\n        } ?: throw Exception(&quot;Invalid Activity&quot;)\n        itemSelector.setOnClickListener { item -&gt;\n            // Update the UI\n        }\n    }\n}\n\nclass DetailFragment : Fragment() {\n\n    private lateinit var model: SharedViewModel\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        model = activity?.run {\n            ViewModelProviders.of(this).get(SharedViewModel::class.java)\n        } ?: throw Exception(&quot;Invalid Activity&quot;)\n        model.selected.observe(this, Observer&lt;Item&gt; { item -&gt;\n            // Update the UI\n        })\n    }\n}\n</code></pre>\n<p>Notice that both fragments retrieve the activity that contains them. That way, when the fragments each get the <code>ViewModelProvider</code>, they receive the same <code>SharedViewModel</code> instance, which is scoped to this activity.\nThis approach offers the following benefits:</p>\n<ul>\n<li>The activity does not need to do anything, or know anything about this communication.</li>\n<li>Fragments don&#39;t need to know about each other besides the SharedViewModel contract. If one of the fragments disappears, the other one keeps working as usual.</li>\n<li>Each fragment has its own lifecycle, and is not affected by the lifecycle of the other one. If one fragment replaces the other one, the UI continues to work without any problems.</li>\n</ul>\n<h4>Replacing Loaders with ViewModel</h4>\n<p>Loader classes like <code>CursorLoader</code> are frequently used to keep the data in an app&#39;s UI in sync with a database. You can use <code>ViewModel</code>, with a few other classes, to replace the loader. Using a <code>ViewModel</code> separates your UI controller from the data-loading operation, which means you have fewer strong references between classes.</p>\n<p>In one common approach to using loaders, an app might use a <code>CursorLoader</code> to observe the contents of a database. When a value in the database changes, the loader automatically triggers a reload of the data and updates the UI. <code>ViewModel</code> works with Room and LiveData to replace the loader. The <code>ViewModel</code> ensures that the data survives a device configuration change. Room informs your <code>LiveData</code> when the database changes, and the LiveData, in turn, updates your UI with the revised data.</p>\n",
    "path": "19-android-architecture-components/ViewModel.md"
  },
  {
    "title": "WorkManager",
    "heading": "h1",
    "content": "\n<p>Scheduling tasks with work manager is part of Android Jetpack. The WorkManager API makes it easy to specify deferrable, asynchronous tasks and when they should run. These APIs let you create a task and hand it off to WorkManager to run immediately or at an appropriate time.\nWorkManager chooses the appropriate way to run your task based on such factors as the device API level and the app state. If WorkManager executes one of your tasks while the app is running, WorkManager can run your task in a new thread in your app&#39;s process. If your app is not running, WorkManager chooses an appropriate way to schedule a background task--depending on the device API level and included dependencies, WorkManager might use <code>JobScheduler</code>, <code>Firebase JobDispatcher</code>, or <code>AlarmManager</code>. You don&#39;t need to write device logic to figure out what capabilities the device has and choose an appropriate API; instead, you can just hand your task off to WorkManager and let it choose the best option. WorkManager is intended for tasks that require a guarantee that the system will run them even if the app exits, like uploading app data to a server. It is not intended for in-process background work that can safely be terminated if the app process goes away</p>\n<h4>Classes and concepts:</h4>\n<p>The WorkManager API uses several different classes. In some cases, you&#39;ll need to subclass one of the API classes.\nThese are the most important WorkManager classes:</p>\n<ul>\n<li><p><strong>Worker</strong>: specifies what task you need to perform. The WorkManager APIs include an abstract Worker class. You extend this class and perform the work here.</p>\n</li>\n<li><p><strong>WorkRequest</strong>: represents an individual task. At a minimum, a WorkRequest object specifies which Worker class should perform the task. However, you can also add details to the WorkRequest object, specifying things like the circumstances under which the task should run. Every WorkRequest has an autogenerated unique ID; you can use the ID to do things like cancel a queued task or get the task&#39;s state. WorkRequest is an abstract class; in your code, you&#39;ll be using one of the direct subclasses, OneTimeWorkRequest or PeriodicWorkRequest. </p>\n</li>\n<li><ul>\n<li><strong>WorkRequest.Builder</strong>: a helper class for creating WorkRequest objects. Again, you&#39;d be using one of the subclasses, OneTimeWorkRequest.Builder or PeriodicWorkRequest.Builder.</li>\n</ul>\n</li>\n<li><ul>\n<li><strong>Constraints</strong>: specifies restrictions on when the task should run (for example, &quot;only when connected to the network&quot;). You create the Constraints object with Constraints.Builder, and pass the Constraints to the WorkRequest.Builder before creating the WorkRequest.</li>\n</ul>\n</li>\n<li><p><strong>WorkManager</strong>: enqueues and manages the work requests. You pass your WorkRequest object to WorkManager to enqueue the task. WorkManager schedules the task in such a way as to spread out the load on system resources, while honoring the constraints you specify.</p>\n</li>\n<li><p><strong>WorkInfo</strong>: contains information about a particular task. The WorkManager provides a LiveData for each WorkRequest object. The LiveData holds a WorkInfo object; by observing that LiveData, you can determine the current status of the task, and get any returned values after the task finishes.</p>\n</li>\n</ul>\n<h4>Typical workflow:</h4>\n<p>Suppose that you&#39;re writing an app that needs to periodically compress its stored images. You want to use the WorkManager APIs to schedule the image compression. In this case, you don&#39;t particularly care when the compression happens; you want to set up the task and forget about it.</p>\n<p>First, you would define your Worker class, and override its doWork() method. Your worker class specifies how to perform the operation, but doesn&#39;t have any information about when the task should run.</p>\n<pre><code class=\"lang-kotlin\">class CompressWorker(context : Context, params : WorkerParameters)\n    : Worker(context, params) {\n\n    override fun doWork(): Result {\n\n        // Do the work here--in this case, compress the stored images.\n        // In this example no parameters are passed; the task is\n        // assumed to be &quot;compress the whole library.&quot;\n        myCompress()\n\n        // Indicate success or failure with your return value:\n        return Result.success()\n\n        // (Returning Result.retry() tells WorkManager to try this task again\n        // later; Result.failure() says not to try again.)\n    }\n}\n</code></pre>\n<p>Next, you create a OneTimeWorkRequest object based on that Worker, then enqueue the task with WorkManager:</p>\n<pre><code class=\"lang-kotlin\">val compressionWork = OneTimeWorkRequestBuilder&lt;CompressWorker&gt;().build()\nWorkManager.getInstance().enqueue(compressionWork)\n</code></pre>\n<p>WorkManager chooses an appropriate time to run the task, balancing such considerations as the load on the system, whether the device is plugged in, and so on. In most cases, if you don&#39;t specify any constraints, WorkManager runs your task right away. If you need to check on the task status, you can get a WorkInfo object by getting a handle to the appropriate LiveData<WorkInfo>. For example, if you want to check if the task has finished, you could use code like this:</p>\n<pre><code class=\"lang-kotlin\">WorkManager.getInstance().getWorkInfoByIdLiveData(compressionWork.id)\n                .observe(lifecycleOwner, Observer { workInfo -&gt;\n                    // Do something with the status\n                    if (workInfo != null &amp;&amp; workInfo.state.isFinished) {\n                        // ...\n                    }\n                })\n</code></pre>\n<h4>Task constraints:</h4>\n<p>If you wish, you can specify constraints on when the task should run. For example, you might want to specify that the task should only run when the device is idle, and connected to power. In this case, you&#39;d need to create a OneTimeWorkRequest.Builder object, and use that builder to create the actual OneTimeWorkRequest:</p>\n<pre><code class=\"lang-kotlin\">// Create a Constraints object that defines when the task should run\nval myConstraints = Constraints.Builder()\n        .setRequiresDeviceIdle(true)\n        .setRequiresCharging(true)\n        // Many other constraints are available, see the\n        // Constraints.Builder reference\n        .build()\n\n// ...then create a OneTimeWorkRequest that uses those constraints\nval compressionWork = OneTimeWorkRequestBuilder&lt;CompressWorker&gt;()\n        .setConstraints(myConstraints)\n        .build()\n</code></pre>\n<p>Then pass the new <code>OneTimeWorkRequest</code> object to <code>WorkManager.enqueue()</code>, as before. WorkManager considers your constraints when finding a time to run the task.</p>\n<h4>Canceling a Task:</h4>\n<p>You can cancel a task after you enqueue it. To cancel the task, you need its work ID, which you can get from the WorkRequest object. For example, the following code cancels the compressionWork request from the previous section:</p>\n<pre><code class=\"lang-kotlin\">val compressionWorkId:UUID = compressionWork.getId()\nWorkManager.getInstance().cancelWorkById(compressionWorkId)\n</code></pre>\n<p>WorkManager makes its best effort to cancel the task, but this is inherently uncertain--the task may already be running or finished when you attempt to cancel it. WorkManager also provides methods to cancel all tasks in a unique work sequence, or all tasks with a specified tag, also on a best-effort basis.</p>\n",
    "path": "19-android-architecture-components/WorkManager.md"
  },
  {
    "title": "<strong>Animations:</strong>",
    "heading": "h1",
    "content": "\n<p>Users must have a great experience with our application, to make our app stand out among thousands of other applications. Animations provide the visual cues to improve the user experience and are very important when the content or screen state is changing. We have already seen a method in the form of TransitionDrawable, for adding animations in our application. Android adds default animations at most of the places, now we would learn how to add our own animations.</p>\n<p>There are various ways of doing animations and we will look at some of them here:</p>\n<h3><strong>Animation Drawable:</strong></h3>\n<p>This drawable lets us create frame-by-frame animations. We can mention the order of drawables and mention the time between each animation. Here is an example:</p>\n<pre><code>&lt;animation-listxmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;\n    &lt;item android:drawable=&quot;@drawable/rectangle&quot; android:duration=&quot;50&quot;/&gt;\n    &lt;item android:drawable=&quot;@drawable/oval&quot; android:duration=&quot;50&quot;/&gt;\n    &lt;item android:drawable=&quot;@drawable/rectangle&quot; android:duration=&quot;50&quot;/&gt;\n    &lt;item android:drawable=&quot;@drawable/oval&quot; android:duration=&quot;50&quot;/&gt;\n&lt;/animation-list&gt;\n</code></pre><p>Now we can use the following code to start the animation.</p>\n<pre><code>ImageView iv = (ImageView)findViewById(R.id.imageView1);\nAnimationDrawable drawable = (AnimationDrawable)iv.getDrawable();\ndrawable.start();\n</code></pre><p>In case we want our animation to run only once, we should set the oneShot property of animation drawable to true.</p>\n<h3><strong>View Animations:</strong></h3>\n<p>View animations are present in android.view.animation. Android have had these since the beginning. Using these animations we can do actions like move, rotate, scale etc. on views. These should be enough to help us achieve a lot of our tasks. Let’s look at some examples:</p>\n<h4><strong>Alpha:</strong></h4>\n<p>We can use this to change the alpha value of a view. Here is an example:</p>\n<pre><code>&lt;alpha xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    android:toAlpha=&quot;1&quot;\n    android:fromAlpha=&quot;0&quot;\n    android:duration=&quot;2000&quot;\n    android:startOffset=&quot;2000&quot;&gt;\n&lt;/alpha&gt;\n</code></pre><p>Any view, which animates using this, will go from invisible (alpha 0) to completely opaque (alpha 1). Animation will start 2 seconds after we call animate on it and animation will run for 2 second.</p>\n<p>Here is the java code run this on a textview:</p>\n<pre><code>TextView tv =(TextView) findViewById(R.id.textView1);\nAnimation a = AnimationUtils.loadAnimation(this, R.anim.alpha);\ntv.startAnimation(a);\n</code></pre><p>We can use the same java code for any kind of animations.</p>\n<h4><strong>Rotate</strong>:</h4>\n<p>We can rotate any view by using this. Here is some example code:</p>\n<pre><code>&lt;rotate xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    android:startOffset=&quot;1000&quot;\n    android:duration=&quot;1000&quot;\n    android:fromDegrees=&quot;0&quot;\n    android:toDegrees=&quot;360&quot;\n    android:pivotX=&quot;40&quot;\n    android:pivotY=&quot;40&quot;&gt;\n&lt;/rotate&gt;\n</code></pre><p>Here pivotX and pivotY are the X, Y coordinates of point around which the view is rotated.</p>\n<h4><strong>Scale</strong>:</h4>\n<p>Here is an example:</p>\n<pre><code>&lt;scalexmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    android:fromXScale=&quot;1&quot;\n    android:toXScale=&quot;2&quot;\n    android:fromYScale=&quot;1&quot;\n    android:toYScale=&quot;2&quot;\n    android:duration=&quot;1000&quot;\n    android:startOffset=&quot;1000&quot;&gt;\n&lt;/scale&gt;\n</code></pre><h4><strong>Translate</strong>:</h4>\n<p>Here is an example:</p>\n<pre><code>&lt;translate xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    android:fromXDelta=&quot;30&quot;\n    android:toXDelta=&quot;200&quot;\n    android:duration=&quot;1000&quot;&gt;\n&lt;/translate&gt;\n</code></pre><h4><strong> Set:</strong></h4>\n<p>Animator set is a combination of all above. We can add more than one of these animations and they will be executed based on startOffset and durations.</p>\n<h4><strong>Interpolators:</strong></h4>\n<p>In all the above examples, animations take place at constant speed from the start to the end. We can change this behaviour by setting the interpolator property in the XML.<br>By default, LinearInterpolator is used, but we can choose from various interpolators like AccelerateInterpolator, OverShootInterpolator etc.</p>\n<h3><strong>Limitations</strong>:</h3>\n<p>Let’s look at some limitations of view animations.</p>\n<ol>\n<li>By now you must have realized that the views end up going to their original places and configs. In order for the final configuration of animation to persists, you can use setFillAfter() function.</li>\n<li>Change your textview to a button and try clicking on the translated view. The issue here is that view animation only change the display, they don’t really move the button. You will have to change the actual location once the animation finishes.</li>\n<li>View animations can only apply to views. You can’t animate content within the view.</li>\n<li>You have these 4-5 fixed properties that can be animated. These are the most commonly used properties, so they would suffice most of times.</li>\n</ol>\n<h3><strong>Shared Transition Animations:</strong></h3>\n<p>These are used when there are common elements between two activities.This animation ensures a smooth transition and a feel of continuity.</p>\n<p><strong>Note that the shared element transitions require Android 5.0 (API level 21) and above and will be ignored for any lower API versions.</strong></p>\n<p>The steps to follow are:</p>\n<ul>\n<li>** **Enable Window Content Transitions in our styles.xml file:</li>\n</ul>\n<pre><code>&lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;\n&lt;!-- Customize your theme here. --&gt;\n    &lt;item name=&quot;android:windowContentTransitions&quot;&gt;true&lt;/item&gt;\n&lt;/style&gt;\n</code></pre><ul>\n<li>Assign a common transition name to the shared elements in both layouts. Use the android:transitionName attribute. For example, in main_activity.xml:</li>\n</ul>\n<pre><code>&lt;android.support.v7.widget.CardView...&gt;\n&lt;ImageView\nandroid:id=&quot;@+id/ivProfile&quot;\nandroid:transitionName=&quot;profile&quot;\nandroid:scaleType=&quot;centerCrop&quot;\nandroid:layout_width=&quot;match_parent&quot;\nandroid:layout_height=&quot;160dp&quot;/&gt;\n&lt;/android.support.v7.widget.CardView&gt;\n</code></pre><p>and in detail activity:</p>\n<pre><code>&lt;LinearLayout...&gt;\n&lt;ImageView\nandroid:id=&quot;@+id/ivProfile&quot;\nandroid:transitionName=&quot;profile&quot;\nandroid:scaleType=&quot;centerCrop&quot;\nandroid:layout_width=&quot;match_parent&quot;\nandroid:layout_height=&quot;380dp&quot;/&gt;\n&lt;/LinearLayout&gt;\n</code></pre><ul>\n<li><strong>Start Activity: </strong>While calling the intent for the detail activity, put the image as an option and bundle it with the intent:</li>\n</ul>\n<pre><code>Intent intent=new Intent(this,DetailsActivity.class);\n// Pass data object in bundle &amp; populate details activity\nActivityOptionsCompat options=ActivityOptionsCompat.makeSceneTransitionAnimation(this,(View)ivProfile,&quot;profile&quot;);\n\nstartActivity(intent , options.toBundle());\n</code></pre><ul>\n<li><strong> To get the same(reverse) effect on back press: </strong>In detail activity, override the back pressed function (in menu and hardware).</li>\n</ul>\n<pre><code>@Override\npublicbooleanonOptionsItemSelected(MenuItemitem){\n    switch(item.getItemId()){\n        // Respond to the action bar&#39;s Up/Home button\n        case android.R.id.home:\n            supportFinishAfterTransition();\n            return true;\n    }\n    return super.onOptionsItemSelected(item);\n}\n</code></pre><p>For multiple shared components, we need to create pairs and pass them as such.</p>\n<h3><strong>Property Animations:</strong></h3>\n<p>Google introduced new animation library, in order to fix all the issues that we saw with view animations. This was introduced with API 11 i.e. Android 3.0. Some of the features were added in API 12 as well.<br>Support library doesn’t provide backward compatibility for these.<br>You might want to have a look at <a href=\"http://nineoldandroids.com/\">http://nineoldandroids.com/</a>. This library provides these new features to old API’s till API 1.</p>\n<p>Let’s discuss various components of the new system. Here for demonstration, we will try to emulate a bouncing ball.</p>\n<p><strong>Value Animator:</strong></p>\n<p>This is the main timing engine in the new framework.<br>This has control over the whole animation and it takes care of the time interpolator as well. Let’s see some code to animate a bouncing ball.</p>\n<p><code>animator= ValueAnimator.ofFloat(intialY,finalY);</code></p>\n<p>This gives us a value animator with values between the initial Y position and the final Y position.</p>\n<p><strong>Time Interpolator: </strong></p>\n<p>Time interpolator gets called from the Value Animator with a fraction value from 0-1 based on the elapsed time. Time interpolator now will now adjust this value. For example, if we have asked for AccelerateDecelerateInterpolator, it will reduce the past fraction to a lower number when called towards the start or the end of the animation. This is because in this interpolator most of the work is done during the middle duration.</p>\n<p>In our case we would like the ball to decelerate while going up, so let’s use the DecelerateInterpolator:</p>\n<p><code>animator.setInterpolator(new android.view.animation.DecelerateInterpolator());</code></p>\n<p><strong>Type Evaluator:</strong></p>\n<p>The type evaluator tells us the value of the property getting animated as a function of the value of the adjusted time elapsed. Some examples of evaluators are IntEvaluator, ArgbEvaluator etc. We can define our own evaluators as well. In our case the default FloatEvaluator will suffice.</p>\n<p><strong>Animator Update Listener:</strong></p>\n<p>This listener is notified for every frame change and is expected to update the values passed by the Animator. Let’s implement the update listener in the main activity itself.</p>\n<pre><code>animator.addUpdateListener(this);\n\npublic voidonAnimationUpdate(ValueAnimator arg0) {\n    iv.setY((Float)arg0.getAnimatedValue());\n}\n</code></pre><p>Here we are just setting the Y value of the imageView.</p>\n<p>Now to make the complete bounce flow, lets implement another interface i.e., the AnimatorListener interface. Inside the animation end function, we would like to change direction.</p>\n<pre><code>publicvoidonAnimationEnd(Animator anim) {\n    ValueAnimator v = (ValueAnimator) anim;\n    float x = (Float) v.getAnimatedValue();\n    if(x ==finalY) {\n        godown();\n    }else{\n        goup();\n    }\n}\n</code></pre><p>godown() and goup() functions have the corresponding animation code.</p>\n<p><strong> Object Animator:</strong></p>\n<p>This is a subclass of value animator and we will be using this very frequently. This class lets us set the object and the property, which we want to animate. For example, we can make our button move from X= 200 to X= -200 to finally settle at the center.</p>\n<p><code>ObjectAnimator move = ObjectAnimator.ofFloat(button,&quot;translationX&quot;, 200f, -200f, 0f);</code></p>\n<p><strong>Animator Set:</strong></p>\n<p>This class lets us combine different animations and play them sequentially, together or with some delay between them. E.g. here we are combining few animations together.</p>\n<pre><code>ObjectAnimator out = ObjectAnimator.ofFloat(iv,&quot;alpha&quot;, 0f);\nObjectAnimator move = ObjectAnimator.ofFloat(tv,&quot;translationX&quot;, 200f, -200f, 0f);\nObjectAnimator in = ObjectAnimator.ofFloat(iv,&quot;alpha&quot;, 0f, 1f);\nAnimatorSet animationSet = new AnimatorSet();\nanimationSet.play(move).before(in).after(out);\nanimationSet.start();\n</code></pre><p><strong>View Property Animator:</strong></p>\n<p>This is an easy concise way to run multiple animations simultaneously. Here is single line code to do the upward ball bouncing code.</p>\n<pre><code>iv.animate().translationYBy(200).\nsetDuration(500).setInterpolator(new\nAccelerateInterpolator()).withEndAction(godown);\n</code></pre><p>Here the last argument is the runnable that will be run when this animation gets over.</p>\n<p><strong>Activity transition:</strong>After calling startActivity, we can override the transition between the screens. For this we will have to add two animations, one for the view going out and the other for the view coming in. After which we can just use this code:</p>\n<p><code>overridePendingTransition(R.anim.slide_in, R.anim.slide_out);</code></p>\n<p>This will make the transition according to these animations instead of the default android animations. We will have to do something on our way back from the detailed activity. For that we need to override the onBackPressed function and add similar line their.</p>\n<p>Similarly for fragment transactions we can set the custom animations on the FragmentTransaction.</p>\n",
    "path": "18-graphics-and-animations/18-2-animations.md"
  },
  {
    "title": "<strong>Graphics</strong>",
    "heading": "h1",
    "content": "\n<p>Graphics are what make your application visually appealing to users. We have various ways of adding graphics to our applications.</p>\n<p>We can add image graphics and use the ImageView to show these images.\nAnother method is to make custom drawables in an XML file. The most complicated method is to handle the drawing process our self by using the canvas class.</p>\n<p>We will choose between these options depending on the need of the application.\nFor example, in case our application doesn’t require very complex graphics with fast animations, we should avoid using the third method.</p>\n<p>The various methods we can use to display graphics in our app are :</p>\n<ol>\n<li><strong>Using images: </strong>We can add the graphic images to the drawable folder and set an ImageView’s src to be that resource. This is the simplest way of adding graphics and we should it whenever possible.\nThis is something that all of us should be familiar with by now.</li>\n<li><strong>Using XML: </strong>We can create graphics using XML code as well. Before we jump into this, we should know what <strong>drawables</strong> are.</li>\n</ol>\n<h3><strong>Drawables: </strong></h3>\n<p>Drawables in Android are “Anything that can be drawn”.\nWe have different kind of drawables like <strong>ShapeDrawables</strong>, <strong>BitmapDrawable</strong>, etc.</p>\n<p>We can create a lot of interesting and complex graphics using these. Let’s look at various categories of XML resources that we can use.</p>\n<h3><strong>Shape Drawables: </strong></h3>\n<p>We can make shapes like rectangle, oval, line etc using these drawables.\nHere is an example code to create a rectangle:</p>\n<pre><code class=\"lang-xml\">&lt;shape xmlns:android= http://schemas.android.com/apk/res/android android:shape=&quot;rectangle&quot;&gt;\n    &lt;corners android:radius=&quot;0dp&quot;/&gt;\n    &lt;solid android:color=&quot;@android:color/white&quot;/&gt;\n    &lt;stroke android:width=&quot;1dp&quot;\n    android:color=&quot;@android:color/darker_gray&quot;/&gt;\n&lt;/shape&gt;\n</code></pre>\n<p>Now we can either use this shape inside another XML by referring to it as <code>@drawable/rectangle</code> or we can access it inside code by using <code>getResources().getDrawable(R.drawable.rectangle)</code></p>\n<h3><strong>State List:</strong></h3>\n<p>A StateListDrawable is used to represent a view, which requires different views based on the state it is in. e.g. Buttons might need different view depending on whether they are selectable or not. We will use the selector tag for StateListDrawable. Here is an example code:</p>\n<pre><code class=\"lang-xml\">&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;\n    &lt;item android:drawable=&quot;@drawable/oval&quot; android:state_pressed=&quot;true&quot;/&gt;\n    &lt;item android:drawable=&quot;@drawable/rectangle&quot;/&gt;\n&lt;/selector&gt;\n</code></pre>\n<p>Now we can use this drawable as background of some other element and when that element is clicked the background will use the oval.xml drawable. Otherwise rectangle.xml will be used.</p>\n<h3><strong>Layer list:</strong></h3>\n<p>LayerDrawable is used when you want layers of other drawables in your view.\nItems in the list are drawn in the order in which we list them; first item in the list is drawn first, very similar to a FrameLayout. Here is an example code:</p>\n<pre><code class=\"lang-xml\">&lt;layer-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;\n&lt;item android:drawable=&quot;@drawable/rectangle&quot; android:left=&quot;40dp&quot;/&gt;\n&lt;item android:drawable=&quot;@drawable/oval&quot; android:right=&quot;40dp&quot;/&gt;\n&lt;/layer-list&gt;\n</code></pre>\n<p>This will make two layers one corresponding to the rectangle.xml and the other for oval.xml.</p>\n<h3><strong>Level List:</strong></h3>\n<p>LevelListDrawable is used when you have multiple drawables corresponding to a view.\nEach drawable in this list is mentioned along with a level. This can be used as source for an image view and the drawable will be shown depending on the level that you set using setLevel/setImageLevel function on the image view. The first list in the item with level greater or equal to the level set will be used.</p>\n<pre><code>&lt;level-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;\n&lt;item android:maxLevel=&quot;0&quot; android:drawable=&quot;@drawable/oval&quot;/&gt;\n&lt;item android:maxLevel=&quot;1&quot; android:drawable=&quot;@drawable/ic_launcher&quot;/&gt;\n&lt;/level-list&gt;\n</code></pre><h3><strong>Transition:</strong></h3>\n<p>TransitionDrawable is a subclass of LayerDrawable. This supports only two layers of drawables. This drawable will show the first one by default but you can fade in/out the second one using startTransition/ reverseTransition function. You can also use the reset Transition function.</p>\n<pre><code>&lt;?xmlversion=&quot;1.0&quot;encoding=&quot;utf-8&quot;?&gt;\n&lt;transition xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;\n&lt;item android:drawable=&quot;@drawable/ic_launcher&quot;/&gt;\n&lt;item android:drawable=&quot;@drawable/oval&quot;/&gt;\n&lt;/transition&gt;\n</code></pre><p>Here is how we can start the transition in your Java code.</p>\n<pre><code>ImageView iv = (ImageView)findViewById(R.id.imageView1);\nTransitionDrawable drawable = (TransitionDrawable) iv.getDrawable();\ndrawable.startTransition(1000);\n</code></pre><p>We can also use <code>setCrossFadeEnabled()</code> to hide first view, when second one becomes visible.</p>\n<h3><strong>Clip:</strong></h3>\n<p>ClipDrawable shows a part of child drawable depending on the current level.\nFor example, we can put an image inside the Clip drawable and make it as source of an ImageView.\nWe can change the level of clip drawable to show/hide the image. Here is an example:</p>\n<pre><code>&lt;clip xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    android:drawable=&quot;@drawable/ic_launcher&quot;\n    android:clipOrientation=&quot;vertical&quot;\n    android:gravity=&quot;top&quot;/&gt;\n</code></pre><p>Clip orientation tells us if the image will be shown horizontally or vertically.</p>\n<p>Here is how we can change the level of clip drawable.</p>\n<pre><code>ImageView iv = (ImageView)findViewById(R.id.imageView1);\nClipDrawable drawable = (ClipDrawable)iv.getDrawable();\ndrawable.setLevel(level);\n</code></pre><h3><strong>Inset:</strong></h3>\n<p>Inset drawables are used when we want to put a smaller drawable inside another drawable. For example, we might want to put a smaller drawable as background of a larger drawable.</p>\n<h3><strong>Custom View Class:</strong></h3>\n<p>We can create our own TextView, RelativeLayout etc by making a subclass of them.\nWe would do this generally to add helper functions, which will let us keep other classes clean by moving code related to that view inside this subclass.</p>\n<p>For example, we might want to do some work every time a view is initialized, in this case we might want to create a subclass and overwrite the constructor and call the initialization code from the constructor.</p>\n",
    "path": "18-graphics-and-animations/18-1-graphics.md"
  },
  {
    "title": "18. Graphics and Animations",
    "heading": "h1",
    "content": "\n<p>It order to make a successful android app it should not only have useful functionalities, but it should also be visually attractive and should be a joy to use.</p>\n<p>Implementing Graphics and animations in our app ensures that the users will have a delightful experience whenever they are on our app and will be tempted to return to the app in the near future.</p>\n",
    "path": "18-graphics-and-animations/intro.md"
  },
  {
    "title": "Adding Firebase Support",
    "heading": "h1",
    "content": "\n<p>Firebase support can be added very easily from the android studio itself.</p>\n<p>Select Tools from menubar and click on Firebase.</p>\n<p><img src=\"./images/ConnectToFirebase1.png\" alt=\"\"></p>\n<p>This opens up the firebase assistant. Select any feature from the list that you wish to explore.</p>\n<p><img src=\"./images/ConnectToFirebase2.png\" alt=\"\"></p>\n<p>In this new window, click on the Connect to Firebase option.</p>\n<p><img src=\"./images/ConnectToFirebase3.png\" alt=\"\"></p>\n<p>In the dialog box that pops up, create a new Firebase project and click on connect to firebase option.</p>\n<p><img src=\"./images/ConnectToFirebase4.png\" alt=\"\"></p>\n<p>Next, Add the Firebase authentication to your app and select the Accept Changes option (to setup the dependencies correctly) in the following dialog box.</p>\n<p><img src=\"./images/ConnectToFirebase5.png\" alt=\"\"></p>\n<p><img src=\"./images/ConnectToFirebase6.png\" alt=\"\"></p>\n<p>With this, the firebase setup is complete.</p>\n",
    "path": "17-firebase/17-1-ConnectToFirebase.md"
  },
  {
    "path": "17-firebase/intro.md"
  },
  {
    "title": "Initializing the Map",
    "heading": "h1",
    "content": "\n<p><strong>Declaring Map Types</strong></p>\n<ul>\n<li>In our <code>MapFragment</code> class, you need to define some global values at the top of the class for use in your application.</li>\n</ul>\n<pre><code class=\"lang-java\">private GoogleApiClient mGoogleApiClient;\nprivate Location mCurrentLocation;\nprivate final int[] MAP_TYPES = {\n    GoogleMap.MAP_TYPE_SATELLITE,\n    GoogleMap.MAP_TYPE_NORMAL,\n    GoogleMap.MAP_TYPE_HYBRID,\n    GoogleMap.MAP_TYPE_TERRAIN,\n    GoogleMap.MAP_TYPE_NONE\n};\nprivate int curMapTypeIndex = 0;```\n* `mGoogleApiClient` and `mCurrentLocation` are used for getting the user&#39;s location for initializing the map camera.\n\n* `MAP_TYPES` and `curMapTypeIndex` are used in the sample code for switching between different map display types.\n\n**Creating the API Client**\n\n* You need to create your `GoogleApiClient` and initiate LocationServices in order to get your user&#39;s current location.\n\n```java\n@Override\npublic void onViewCreated(View view, Bundle savedInstanceState) {\n    super.onViewCreated(view, savedInstanceState);\n    setHasOptionsMenu(true);\n    mGoogleApiClient = new GoogleApiClient.Builder(getActivity())\n        .addConnectionCallbacks(this)\n        .addOnConnectionFailedListener(this)\n        .addApi(LocationServices.API)\n        .build();\n    initListeners();\n}```\n\n* The `initListeners` method binds the interfaces that you declared at the top of the class with the GoogleMap object associated with `SupportMapFragment`.\n\n```java\nprivate void initListeners() {\n    getMap().setOnMarkerClickListener(this);\n    getMap().setOnMapLongClickListener(this);\n    getMap().setOnInfoWindowClickListener(this);\n    getMap().setOnMapClickListener(this);\n}```\n\n* `GoogleApiClient` and listeners are created and bound from `onViewCreated` rather than the `onCreate`.\n\n* This is because the GoogleMap object has not been initialized when `onCreate` is called, so we need to wait until the view is fully created before trying to call `getMap` in order to avoid a `NullPointerException`.\n\n**Configuring the Map**\n\n* We will set up the map camera after the user&#39;s location has been found through Play Services, we will use the Play Services lifecycle to drive initializing our map. You can connect the `GoogleApiClient` in onStart.\n\n```java\n@Override\npublic void onStart() {\n    super.onStart();\n    mGoogleApiClient.connect();\n}\n@Override\npublic void onStop() {\n    super.onStop();\n    if (mGoogleApiClient != null &amp;&amp; mGoogleApiClient.isConnected()) {\n        mGoogleApiClient.disconnect();\n    }\n}\n@Override\npublic void onConnected(Bundle bundle) {\n    mCurrentLocation = LocationServices\n        .FusedLocationApi\n        .getLastLocation(mGoogleApiClient);\n    initCamera(mCurrentLocation);\n}```\n\n* `initCamera` method, you initialize the camera and some basic map properties. You start by creating a CameraPosition object through the `CameraPosition.Builder`, with a target set for the latitude and longitude of your user and a set zoom level.\n\n```java\nprivate void initCamera( Location location ) {\n  CameraPosition position = CameraPosition.builder()\n    .target( new LatLng( location.getLatitude(),location.getLongitude() ) )\n    .zoom( 16f )\n    .bearing( 0.0f )\n    .tilt( 0.0f )\n    .build();\n  getMap().animateCamera(   CameraUpdateFactory.newCameraPosition( position ), null );\n  getMap().setMapType( MAP_TYPES[curMapTypeIndex] );\n  getMap().setTrafficEnabled( true );\n  getMap().setMyLocationEnabled( true );\n  getMap().getUiSettings().setZoomControlsEnabled( true );\n}```\n\n* `setMyLocationEnabled` adds a button to the top right corner of the `MapFragment` that automatically moves the camera to your user&#39;s location when pressed.\n\n* `setZoomControlsEnabled` adds + and - buttons in the lower right corner, allowing the user to change the map zoom level without having to use gestures.\n\n\n# Marking the map .\n\n* The most used map features involves indicating locations with markers. Since a latitude and longitude are needed for adding a marker, you need to use the `OnMapClickListener` to allow the user to pick a spot on the map to place a Marker object.\n\n```java\n@Override\npublic void onMapClick(LatLng latLng) {\n    MarkerOptions options = new MarkerOptions().position(latLng);\n    options.title(getAddressFromLatLng(latLng));\n    options.icon(BitmapDescriptorFactory.defaultMarker());\n    getMap().addMarker(options);\n}```\n\n* This method creates a generic red marker where the user has tapped. Additional options, such as setting a marker as draggable, can be set through the `MarkerOptions` object .\n\n* The `defaultMarker` method accepts a float value that defines the hue.\n\n* `addMarker` returns a Marker object, which can be stored for manually removing specific markers if needed.\n\n\n# Drawing on map .\n\n* The `GoogleMap` object has a set of methods that make it easy to draw shapes and place images onto the map.\n\n* To draw a simple circle, you only need to create a `CircleOptions` object, set a radius and center location, and define the stroke/fill colors and size.\n\n* You have a `CircleOptions` object, you can call `addCircle` to draw the defined circle on top of the map. Just like when placing markers, objects that are drawn on the map return an object of the drawn item type so it can be referenced later .\n\n```java\nprivate void drawCircle( LatLng location ) {\n  CircleOptions options = new CircleOptions();\n  options.center( location );\n  //Radius in meters\n  options.radius( 10 );\n  options.fillColor( getResources().getColor( R.color.fill_color ) );\n  options.strokeColor( getResources().getColor( R.color.stroke_color ) );\n  options.strokeWidth( 10 );\n  getMap().addCircle(options);\n}\n</code></pre>\n<ul>\n<li><p>To draw a different closed-off shape, you can take multiple LatLng points and create a PolygonOptions object.</p>\n</li>\n<li><p>PolygonOptions are created in a similar fashion to CircleOptions. Instead of using a center and radius method, you use add with a list of points. You can then call addPolygon to draw the shape.</p>\n</li>\n</ul>\n<pre><code class=\"lang-java\">private void drawPolygon( LatLng startingLocation ) {\n  LatLng point2 = new LatLng( startingLocation.latitude +   .001,startingLocation.longitude );\n  LatLng point3 = new LatLng( startingLocation.latitude,startingLocation.longitude + .001 );\n  PolygonOptions options = new PolygonOptions();\n  options.add( startingLocation, point2, point3 );\n  options.fillColor( getResources().getColor(R.color.fill_color ) );\n  options.strokeColor( getResources().getColor( R.color.stroke_color ) );\n  options.strokeWidth( 10 );\n  getMap().addPolygon( options );\n}```\n</code></pre>\n",
    "path": "16-google-maps/16-2-creating-maps.md"
  },
  {
    "title": "Google Maps API",
    "heading": "h1",
    "content": "\n<p>The Google Maps Android API includes built-in support for accessibility.</p>\n<h1>Setting up the play console</h1>\n<p>In order to use the Google Maps API, you must register your application on the Google Developer Console and enable the API. To do this, start by going to the Google Developer Console. If you already have a project created, you can skip the next section. If not, you can follow along and create a new project for your maps application.</p>\n<p><strong>Create a new project</strong></p>\n<ul>\n<li><p>Once you hit Create, a dialog appears in the lower right corner of the page with a loading indicator while the project is being created.\n<strong>Enable the Maps API</strong></p>\n</li>\n<li><p>When the project has been created, or you have selected an existing project, you are taken to the project Overview screen. From here you will want to expand the APIs &amp; auth item in the left navigation panel and click on APIs.</p>\n</li>\n<li><p>This takes you to a screen where you can click on the Enable API button in order to enable the Maps API for your project.</p>\n</li>\n</ul>\n<p><strong>Creating an Android API Key</strong></p>\n<ul>\n<li><p>After you&#39;ve enabled the Maps API, click on the Credentials item under APIs &amp; auth in the side navigation to get a key to access the Maps API in your application. When you are presented with the Credentials dialog, press the blue Add Credentials button and select API Key.</p>\n</li>\n<li><p>You need to select Android Key in the next dialog. If you were to create the same application using maps on different platforms, you could create a key for each platform.</p>\n</li>\n<li><p>Click Add package name and fingerprint. This provides two fields, one for adding a package name and another for adding the SHA1 from your application signing key.</p>\n</li>\n</ul>\n<p><strong>SHA-1 Certificate</strong></p>\n<ul>\n<li>To get the SHA1 signature, you need to open a terminal or command prompt and navigate to the location of your application&#39;s signing key. This can be either your release key or debug.keystore.</li>\n</ul>\n<p><code>keytool -list -v -keystore debug.keystore</code></p>\n<ul>\n<li>After you have created your SHA1 key and entered it into the text field, click on the Create button. You are then presented with a dialog containing the API key that you need to add to your Android app to access the Maps API.</li>\n</ul>\n",
    "path": "16-google-maps/16-1-maps-api.md"
  },
  {
    "title": "Google Maps",
    "heading": "h1",
    "content": "\n<p>With Google Maps Android API v2, you can embed maps into an activity as a fragment with a simple XML snippet. The new Maps offer exciting features such as 3D maps; indoor, satellite, terrain, and hybrid maps; vector-based tiles for efficient caching and drawing; animated transitions; and much more.</p>\n<h1>Implementation of google maps</h1>\n<p>you can create the initial Android project with the same package name that you used for creating the API key. Once your project is created, open the build.gradle file. You need to import the Play Services library for maps.</p>\n<pre><code class=\"lang-java\">implementation &#39;com.google.android.gms:play-services-maps:7.8.0&#39;\nimplementation &#39;com.google.android.gms:play-services-location:7.8.0&#39;```\n\n\n* Open your `AndroidManifest.xml` file\n\n```xml\n&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;```\n\n* Within the application node, you need to add two pieces of metadata.\n\n* Within the application node, you need to add two pieces of metadata.\n\n* `@string/google_api_key` is a string reference to the key from the Google Developer Console.\n\n```xml\n&lt;meta-data\nandroid:name=&quot;com.google.android.gms.version&quot;\nandroid:value=&quot;@integer/google_play_services_version&quot; /&gt;\n&lt;meta-data\nandroid:name=&quot;com.google.android.geo.API_KEY&quot;\nandroid:value=&quot;@string/google_api_key&quot;/&gt;```\n* Next, you need to create a new Java class, called `MapFragment`, which extends `SupportMapFragment`. `SupportMapFragment` is used here rather than `com.google.android.gms.maps.MapFragment` in order to add backwards compatibility before API 12.\n\n* Once you have the base fragment created, you need to implement the six interface\n\n```java\npublic class MapFragment extends SupportMapFragment implements GoogleApiClient.ConnectionCallbacks,\n    GoogleApiClient.OnConnectionFailedListener,\n    GoogleMap.OnInfoWindowClickListener,\n    GoogleMap.OnMapLongClickListener,\n    GoogleMap.OnMapClickListener,\n    GoogleMap.OnMarkerClickListener {````\n* `ConnectionCallbacks` and `OnConnectionFailedListener` are designed to monitor the state of the GoogleApiClient, which is used in this application for getting the user&#39;s current location.\n\n* `OnInfoWindowClickListener` is triggered when the user clicks on the info window that pops up over a marker on the map.\n\n* `OnMapLongClickListener`and `OnMapClickListener` are triggered when the user either taps or holds down on a portion of the map.\n\n* `OnMarkerClickListener` is called when the user clicks on a marker on the map, which also displays the info window for that marker.\n\n* Now , with all this set up open `activity_main.xml`\n\n```xml\n&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\nxmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot;\nandroid:layout_height=&quot;match_parent&quot;\ntools:context=&quot;.MainActivity&quot;&gt;\n&lt;fragment\nandroid:id=&quot;@+id/map&quot;\nandroid:name=&quot;com.Stonedcoder.googlemaps.MapFragment&quot;\nandroid:layout_width=&quot;match_parent&quot;\nandroid:layout_height=&quot;match_parent&quot;/&gt;\n&lt;/RelativeLayout&gt;```\n\n* Now you should be able to run your application and view a map of Earth that is fully zoomed out and focused on latitude 0, longitude 0.\n</code></pre>\n",
    "path": "16-google-maps/intro.md"
  },
  {
    "title": "Assignments",
    "heading": "h1",
    "content": "\n<ol>\n<li>Create a compass, point to the direction required using arrow images</li>\n<li>Create a step counter app</li>\n<li>Create an app that has a screen which changes the color when the screen is rotated</li>\n<li>Store images with some logic in your own folder</li>\n</ol>\n",
    "path": "15-location-and-sensors/assignments.md"
  },
  {
    "title": "<strong>Sensors</strong>",
    "heading": "h1",
    "content": "\n<p>Different devices have avariety of sensorsthat can be accessed via the Sensor framework.</p>\n<p>Link:<a href=\"http://developer.android.com/guide/topics/sensors/sensors_overview.html\">http://developer.android.com/guide/topics/sensors/sensors_overview.html</a></p>\n<h3>Possible tasks related to sensors include:</h3>\n<ol>\n<li>List available sensors</li>\n<li>Determine sensor capabilities (range, resolution, etc.)</li>\n<li>Acquire raw sensor data</li>\n<li>Register sensor event listeners</li>\n</ol>\n<p>Common sensors that devices have available are for temperature, light, pressure, acceleration, motion, and orientation. Here&#39;s a list of guides:</p>\n<ol>\n<li><strong> Motion Sensors:</strong><a href=\"http://developer.android.com/guide/topics/sensors/sensors_motion.html\">http://developer.android.com/guide/topics/sensors/sensors_motion.html</a></li>\n<li><strong> Position Sensors:</strong><a href=\"http://developer.android.com/guide/topics/sensors/sensors_position.html\">http://developer.android.com/guide/topics/sensors/sensors_position.html</a></li>\n<li><strong> Environment Sensors:</strong><a href=\"http://developer.android.com/guide/topics/sensors/sensors_environment.html\">http://developer.android.com/guide/topics/sensors/sensors_environment.html</a></li>\n</ol>\n<h3><strong>Sensor Coordinate System</strong></h3>\n<p><img src=\"img/sensor-coordinate.png\" alt=\"\"></p>\n<p>A list of steps involved with getting data from sensors are :</p>\n<h4><strong>Initiate a SensorManager:</strong></h4>\n<p><code>private SensorManager sensorManager;</code></p>\n<h4><strong>Get a list of available sensors in onCreate:</strong></h4>\n<pre><code>sensorManager= (SensorManager) getSystemService(Context.SENSOR_SERVICE);\n\n// Get the default sensor of specified type\nList&lt;Sensor&gt; deviceSensors =mSensorManager.getSensorList(Sensor.TYPE_GRAVITY);\n    for( Sensor sensor : deviceSensors){\n        Log.e(&quot;SEnsor Found&quot;, sensor.toString());\n    }\n</code></pre><h4><strong>Get a specific sensor:</strong></h4>\n<pre><code>Sensor lightSensor= sensorManager.getDefaultSensor(Sensor.TYPE_PROXIMITY);\n</code></pre><p>Following are some properties available on a sensor are:</p>\n<p>getResolution<br>getPower<br>getVendor<br>getVersion</p>\n<h4><strong>Register for the right sensor in life cycle:</strong></h4>\n<pre><code>@Override\nprotected voidonResume() {\n    super.onResume();\n    if(mLight!=null) {\n        sensorManager.registerListener(lightSensorListener, lightSensor, SensorManager.SENSOR_DELAY_NORMAL);\n    }\n}\n\n@Override\nprotected void onPause() {\n    super.onPause();\n    if(lightSensor!=null) {\n        sensorManager.unregisterListener(mLightSensorListener);\n    }\n}\n</code></pre><h4><strong> Handle Callback:</strong></h4>\n<p>This callback is responsible for getting us the values whenever the sensor updates.</p>\n<pre><code>private SensorEventListener lightSensorListener = newSensorEventListener() {\n    @Override\n    public voidonSensorChanged(SensorEvent event) {\n        Log.d(&quot;MY_APP&quot;, event.toString());\n        Log.e(&quot;event&quot;, event.values[0] +&quot;&quot;); //the values array is a float array representing the value across different coordinate systems\n    }\n\n    @Override\n    public void onAccuracyChanged(Sensor sensor, int accuracy) {\n        Log.d(&quot;MY_APP&quot;, sensor.toString() +&quot; - &quot;+ accuracy);\n    }\n};\n</code></pre><p>These two functions implemented are called when:</p>\n<ol>\n<li><strong>A sensor&#39;s accuracy changes:</strong></li>\n</ol>\n<p>In this case the system invokes the <a href=\"http://developer.android.com/reference/android/hardware/SensorEventListener.html#onAccuracyChanged%28android.hardware.Sensor, int%29\">onAccuracyChanged()</a> method, providing you with a reference to the <a href=\"http://developer.android.com/reference/android/hardware/Sensor.html\">Sensor</a> object that changed and the new accuracy of the sensor.</p>\n<p>Accuracy is represented by one of four status constants:</p>\n<ul>\n<li><a href=\"http://developer.android.com/reference/android/hardware/SensorManager.html#SENSOR_STATUS_ACCURACY_LOW\">SENSOR_STATUS_ACCURACY_LOW</a></li>\n<li><a href=\"http://developer.android.com/reference/android/hardware/SensorManager.html#SENSOR_STATUS_ACCURACY_MEDIUM\">SENSOR_STATUS_ACCURACY_MEDIUM</a></li>\n<li><a href=\"http://developer.android.com/reference/android/hardware/SensorManager.html#SENSOR_STATUS_ACCURACY_HIGH\">SENSOR_STATUS_ACCURACY_HIGH</a></li>\n<li><p><a href=\"http://developer.android.com/reference/android/hardware/SensorManager.html#SENSOR_STATUS_UNRELIABLE\">SENSOR_STATUS_UNRELIABLE</a></p>\n<ol>\n<li><strong>A sensor reports a new value: </strong></li>\n</ol>\n</li>\n</ul>\n<p>In this case the system invokes the <a href=\"http://developer.android.com/reference/android/hardware/SensorEventListener.html#onSensorChanged%28android.hardware.SensorEvent%29\">onSensorChanged()</a> method, providing you with a <a href=\"http://developer.android.com/reference/android/hardware/SensorEvent.html\">SensorEvent</a> object.<br>A <a href=\"http://developer.android.com/reference/android/hardware/SensorEvent.html\">SensorEvent</a> object contains information about the new sensor data, including:</p>\n<ul>\n<li>The accuracy of the data</li>\n<li>The sensor that generated the data</li>\n<li>The timestamp at which the data was generated</li>\n<li>The new data that the sensor recorded.</li>\n</ul>\n<p>For every sensor, event contains an array of values, each of which has a different meaning, for example (environmental sensors).</p>\n<p><em><strong>Note</strong> : To declare that a sensor is absolutely required by your application:</em></p>\n<pre><code>&lt;uses-feature\n    android:name=&quot;android.hardware.sensor.accelerometer&quot;\n    android:required=&quot;true&quot;/&gt;\n</code></pre><p><em>If the device does not support the above hardware, your application won’t show in their play store (incompatible)</em></p>\n",
    "path": "15-location-and-sensors/15-2-sensors.md"
  },
  {
    "title": "Location",
    "heading": "h1",
    "content": "\n<p>Some key considerations to keep in mind while dealing with locations are :</p>\n<p>a. <strong>Location Information</strong>: There are a Multitude of location sources:</p>\n<p>GPS, Cell-ID, and Wi-Fi can each provide a clue to users’ location. Determining which to use and trust is a matter of trade-offs in accuracy, speed, and battery-efficiency.</p>\n<p>Another factor to consider is User movement, because the user location changes, you must account for movement by re-estimating user location every so often.</p>\n<p>b. <strong>Varying accuracy</strong>: Location estimates coming from each location source are not consistent in their accuracy. A location obtained 10 seconds ago from one source might be more accurate than the newest location from another or same source.</p>\n<p>We could choose one of the location providers (network or GPS) and request location updates or set up proximity alert. But there were two main issues with this approach:</p>\n<p>a. In case we need to define precise location, we had to switch between network and GPS location providers (as GPS doesn’t work indoors).</p>\n<p>b. Proximity alerts were used to notify a user about proximity to a location, and this took its toll on the battery life.</p>\n<p>Hence, instead of using the default framework apis for location, we will be using <strong>FusedLocationAPI</strong> for the same.</p>\n<p>Advantages of Using FusedLocationAPI:</p>\n<p>a.<strong> Simple APIs</strong>: Lets us specify high-level needs like “high accuracy” or “low power”, instead of having to worry about location providers.</p>\n<p>b. <strong>Immediately available</strong>: Gives our apps immediate access to the best, most recent location.</p>\n<p>c. <strong>Power-efficiency</strong>: Minimize our app’s use of power. Based on all incoming location requests and available sensors, fused location provider chooses the most efficient way to meet those needs.</p>\n<p>d. <strong>Versatility</strong>: Meets a wide range of needs, from foreground uses that need highly accurate location to background uses that need periodic location updates with negligible power impact.</p>\n<p><em><strong>Note</strong>: Make sure Google Play services is properly installed and working in our device. Please don’t test this location api in emulator because this api is not working in the emulator</em></p>\n",
    "children": [
      {
        "title": "#",
        "heading": "h2",
        "content": "\n",
        "children": [
          {
            "title": "Getting the <strong>Last Know</strong>n Location:",
            "heading": "h3",
            "content": "\n<ul>\n<li>** **Import the google-play-services dependencies via gradle</li>\n</ul>\n<p><code>implementation&#39;com.google.android.gms:play-services-location:8.4.0&#39;</code></p>\n<ul>\n<li>** **Add location Permissions to the Manifest file</li>\n</ul>\n<pre><code>&lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot;/&gt;\n&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot;/&gt;\n</code></pre><ul>\n<li>Connect to Google API client</li>\n</ul>\n<p>This requires implementation of some functions by the activity handling location<strong>:</strong></p>\n<p>The <strong>Google API Client</strong> provides a common entry point to all the Google Play services and manages the network connection between the user&#39;s device and each Google service.</p>\n<p><img src=\"img/sensor-coordinate.png\" alt=\"\"></p>\n<pre><code>if (mGoogleApiClient == null) {\n    mGoogleApiClient = new GoogleApiClient.Builder(this)\n    .addConnectionCallbacks(this)\n    .addOnConnectionFailedListener(this)\n    .addApi(LocationServices.API)\n    .build();\n}\n</code></pre><ul>\n<li>Next up, we should also disconnect the mGoogleApiClient , whenever the activity stops, and then reconnect in OnStart(). So add required actions in life cycle methods.</li>\n</ul>\n<pre><code>protected void onStart() {\n    super.onStart();\n    mGoogleApiClient.connect();\n}\n\nprotected void onStop() {\n    mGoogleApiClient.disconnect();\n    super.onStop();\n}\n</code></pre><ul>\n<li>We will get Last Known Location in the OnConnected() method as discussed in class.\nThe getLastLocation() method returns the best most recent location currently available (as per your permissions), it returns null if no location is available.</li>\n</ul>\n<pre><code>public void onConnected(@Nullable Bundle bundle) {\n    lastLocation = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);\n    if (lastLocation != null) {\n        Log.i(TAG, &quot;Latitude :&quot; + lastLocation.getLatitude());Log.i(TAG, &quot;Longitude :&quot; + lastLocation.getLongitude());\n    } else {\n        Log.i(TAG, &quot;Last Location Empty&quot;);\n    }\n    if (!requestedLocationUpdates) {\n        startLocationUpdates();\n    }\n}\n</code></pre>"
          }
        ]
      },
      {
        "title": "#",
        "heading": "h2",
        "content": "\n",
        "children": [
          {
            "title": "<strong>Setting Up Location Updates: </strong>",
            "heading": "h3",
            "content": "\n<p>In order to set up, we need to create a LocationRequest Object which takes some parameters.<br>The parameters determine the level of accuracy for location requests:</p>\n",
            "children": [
              {
                "title": "i. Update interval",
                "heading": "h4",
                "content": "\n<p><strong>setInterval(long interval)</strong> - This method sets the rate in milliseconds at which your app prefers to receive location updates. Note that the location updates may be faster than this rate if another app is receiving updates at a faster rate, or slower than this rate, or there may be no updates at all (if the device has no connectivity, for example).</p>\n<p>Link: developers.google.com/android/reference/com/google/android/gms/location/LocationRequest.html#setInterval%28long%29</p>\n"
              },
              {
                "title": "ii. Fastest update interval",
                "heading": "h4",
                "content": "\n<p><strong>setFastestInterval(long interval)</strong> - This method sets the fastest rate in milliseconds at which your app can handle location updates. You need to set this rate because other apps also affect the rate at which updates are sent. The Google Play services location APIs send out updates at the fastest rate that any app has requested with setInterval(). If this rate is faster than your app can handle, you may encounter problems with UI flicker or data overflow. To prevent this, call setFastestInterval() to set an upper limit to the update rate.</p>\n<p>Link: developers.google.com/android/reference/com/google/android/gms/location/LocationRequest.html#setFastestInterval%28long%29</p>\n"
              },
              {
                "title": "iii. Priority",
                "heading": "h4",
                "content": "\n<p><strong>setPriority(int priority)</strong> - This method sets the priority of the request, which gives the Google Play services location services a strong hint about which location sources to use.</p>\n<p>Link: developers.google.com/android/reference/com/google/android/gms/location/LocationRequest.html#setPriority%28int%29</p>\n<p>In the setPriority method, the following values are supported:</p>\n<p>i. <strong>Priority Balanced Power Accuracy</strong>: Use this setting to request location precision to within a city block, which is an accuracy of approximately 100 meters. This is considered a coarse level of accuracy, and is likely to consume less power. With this setting, the location services are likely to use WiFi and cell tower positioning.</p>\n<p>Link:developers.google.com/android/reference/com/google/android/gms/location/LocationRequest.html#PRIORITY_BALANCED_POWER_ACCURACY</p>\n<p>ii. <strong>Priority High Accuracy</strong>: Use this setting to request the most precise location possible. With this setting, the location services are more likely to use GPS to determine the location.</p>\n<p>Link:developers.google.com/android/reference/com/google/android/gms/location/LocationRequest.html#PRIORITY_HIGH_ACCURACY</p>\n<p>iii. <strong>Priority Low Power</strong>: Use this setting to request city-level precision, which is an accuracy of approximately 10 kms. This is considered a coarse level of accuracy, and is likely to consume less power.</p>\n<p>Link:developers.google.com/android/reference/com/google/android/gms/location/LocationRequest.html#PRIORITY_LOW_POWER</p>\n<p>iv. <strong>Priority No Power</strong>: Use this setting if you need negligible impact on power consumption, but want to receive location updates when available. With this setting, your app does not trigger any location updates, but receives locations triggered by other apps. Link:developers.google.com/android/reference/com/google/android/gms/location/LocationRequest.html#PRIORITY_NO_POWER</p>\n"
              }
            ]
          },
          {
            "title": "Getting the location updates :",
            "heading": "h3",
            "content": "\n<p>In the onConnected method,, check if you are already registered to listen to updates and if not, start listening to updates:</p>\n<pre><code>if(!requestingLocationUpdates){\n    startLocationUpdates();\n}\n</code></pre><p>Set up the following function to start listening to location updates:</p>\n<pre><code>private void startLocationUpdates() {\n    locationRequest = LocationRequest.create()\n    .setPriority(LocationRequest.PRIORITY_BALANCED_POWER_ACCURACY)\n    .setInterval(10000)\n    .setFastestInterval(2000);\nlocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient,locationRequest,this);\n}\n</code></pre><p>This gives a function callback onLocationChanged wherein you can do whatever you want with the new location:</p>\n<pre><code>@Override\npublic void onLocationChanged(Location location) {\n    Log.e(&quot;Locatiopn Update&quot;, location.getLongitude() + &quot; &quot; + location.getLatitude());\n}\n</code></pre><p>Whenever out activity loses focus, we won’t be requiring location updates, so we should stop location updates in onPause() lifecycle method, and start receiving updates in corresponding lifecycle method i.e in onResume().</p>\n<pre><code>@Override\nprotected void onPause(){\n    super.onPause();\n    stopLocationUpdates();\n}\n\n@Override\npublic void onResume() {\n    super.onResume();\n    if (googleApiClient.isConnected() &amp;&amp; !requestingLocationUpdates) {\n        startLocationUpdates();\n    }\n}\n\nprotected void stopLocationUpdates() {\n    LocationServices.FusedLocationApi.removeLocationUpdates(googleApiClient, this);\n}\n</code></pre>"
          }
        ]
      }
    ],
    "path": "15-location-and-sensors/15-1-location.md"
  },
  {
    "title": "Introduction",
    "heading": "h1",
    "content": "\n<p>Some of the mobile applications are more popular compared to their corresponding websites for many reasons. These reasons range from portability, full time connectivity (you can’t be on your computer all the time but your phone can be with you all the time), etc. Along with these one more important factor is that mobile phones can provide functionality that can’t be provided by the websites. For example, we can find a person’s location using GPS, speed using accelerometer, barometer to find out atmospheric conditions etc. These fancy instruments come with even lesser expensive phones as well. It’s very important for developers to take advantage of these to enhance the user experience.</p>\n<p>Let’s look at some popular examples of sensors and other hardware components. We will also look at how we can use them in our applications.</p>\n",
    "path": "15-location-and-sensors/intro.md"
  },
  {
    "title": "Runtime Permissions",
    "heading": "h1",
    "content": "\n<p>Android 6.0 Marshmallow (API 23) introduced a new runtime permission model. If your application targets Android 6.0, you must use the new permissions model.</p>\n<ul>\n<li><p>A permission request is made via a call to the <code>requestPermissions()</code> method of the <code>ActivityCompat</code> class.</p>\n</li>\n<li><p>When this method is called, the permission request is handled asynchronously and a method named <code>onRequestPermissionsResult()</code> called when the task is completed.</p>\n</li>\n<li><p>The <code>requestPermissions()</code> method takes as arguments a reference to the current activity, together with the identifier of the permission being requested and a request code.</p>\n</li>\n<li><p>The request code can be any integer value and will be used to identify which request has triggered the call to the <code>onRequestPermissionsResult()</code> method.</p>\n</li>\n<li><p>Modify the <code>MainActivity.java</code> file to declare a request code and request recording permission in the event that the permission check failed .</p>\n</li>\n</ul>\n<pre><code class=\"lang-java\">package com.stonedcoder.coding - blocks.permissions;\n\nimport android.Manifest;\nimport android.content.pm.PackageManager;\nimport android.support.v4.content.ContextCompat;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.support.v4.app.ActivityCompat;\n\npublic class PermissionDemoActivity extends AppCompatActivity {\n\n    private static String TAG = &quot;PermissionDemo&quot;;\n    private static final int RECORD_REQUEST_CODE = 101;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_permission_demo);\n\n        int permission = ContextCompat.checkSelfPermission(this,\n            Manifest.permission.RECORD_AUDIO);\n\n        if (permission != PackageManager.PERMISSION_GRANTED) {\n            Log.i(TAG, &quot;Permission to record denied&quot;);\n            makeRequest();\n        }\n    }\n\n    protected void makeRequest() {\n        ActivityCompat.requestPermissions(this,\n            new String[] {\n                Manifest.permission.RECORD_AUDIO\n            },\n            RECORD_REQUEST_CODE);\n    }\n}\n</code></pre>\n<ul>\n<li>Now implement the onRequestPermissionsResult() method.</li>\n</ul>\n<pre><code class=\"lang-java\">@Override\npublic void onRequestPermissionsResult(int requestCode,\n    String permissions[], int[] grantResults) {\n    switch (requestCode) {\n        case RECORD_REQUEST_CODE:\n            {\n\n                if (grantResults.length == 0 ||\n                    grantResults[0] !=\n                    PackageManager.PERMISSION_GRANTED) {\n\n                    Log.i(TAG, &quot;Permission has been denied by user&quot;);\n                } else {\n                    Log.i(TAG, &quot;Permission has been granted by user&quot;);\n                }\n                return;\n            }\n    }\n}\n`\n</code></pre>\n<ul>\n<li><p>Compile and run the app on an Android 6 device and note that a dialog seeking permission to record audio appears .</p>\n</li>\n<li><p>Tap the Allow button and check that the “Permission has been granted by user” message appears in the Logcat panel.</p>\n</li>\n<li><p>Once the user has granted the requested permission, the <code>checkSelfPermission()</code> method call will return a <code>PERMISSION_GRANTED</code> result on future app invocations until the user uninstalls and re-installs the app or changes the permissions for the app in Settings.</p>\n</li>\n</ul>\n",
    "path": "14-permissions/14-1-runtime-permissions.md"
  },
  {
    "title": "Android Permissions",
    "heading": "h1",
    "content": "\n<p>From Android Marshmallow , Google has changed the way of permissions that applications handle.</p>\n<p>Earlier, we simply mention permissions in AndroidManifest.xml, but from Android 6.0 , we need to check every time for permission related task.</p>\n<p>Applications need to ask the permission while it is running and also have to provide enough contexts on why the permissions are required. All the permissions, though we have to declare in manifest whenever application want to access the APIs that need the runtime permission, apps has to check whether that permission has been granted or to request the required permission using support library.</p>\n<p><strong>Types of Permissions:</strong></p>\n<p>Normal permission .\nDangerous permission .</p>\n<h1>Permission Groups:</h1>\n<p>Different types of permissions are separated into groups based on which data or resource it requests access for. Once permission from a group has been granted then other permissions within that group do not need to be granted again. For example, permission group for SMS can send or receive the SMS. Those are two different permissions but the user only needs to allow one.</p>\n<p>Android 6.0 Marshmallow has nine main groups of permissions:</p>\n<p>Calendar: Read and/or write to the calendar.</p>\n<p>Camera: Give the application the ability to access the camera.</p>\n<p>Location: Access fine or coarse location.</p>\n<p>Microphone: The ability to record audio.</p>\n<p>Phone: Includes phone state, the ability to make calls, read and write to the call log and voicemail.</p>\n<p>Sensor: The ability to use various sensors in the device, like a gyroscope.</p>\n<p>SMS: Similar to how the phone is handled including sending and receiving texts. MMS and cell broadcasts.</p>\n<p>Storage: Read and write to device’s external storage.</p>\n<h1>Normal Permissions</h1>\n<p>It indicates that there&#39;s no great risk to the user&#39;s privacy or security in letting apps have those permissions.</p>\n<pre><code class=\"lang-xml\">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;\n&lt;uses-permission android:name=&quot;android.permission.REQUEST_INSTALL_PACKAGES&quot;/&gt;\n&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH&quot;/&gt;```\n\n\n* Create a new project in Android Studio\n\n* Open up your `Main_Activity.java`\n\n```java\npackage com.stonedcoder.coding-blocks.permissions;\n\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.Manifest;\nimport android.content.pm.PackageManager;\nimport android.support.v4.content.ContextCompat;\nimport android.util.Log;\n\npublic class MainActivity extends AppCompatActivity {\n\n    private static String TAG = &quot;Permission &quot;;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_permission_demo);\n\n        int permission = ContextCompat.checkSelfPermission(this,\n            Manifest.permission.RECORD_AUDIO);\n\n        if (permission != PackageManager.PERMISSION_GRANTED) {\n            Log.i(TAG, &quot;Permission to record denied&quot;);\n        }\n    }\n}\n</code></pre>\n<ul>\n<li><p>An app before 6.0 attempts to make use of a feature that requires approval of a dangerous permission, and regardless of whether or not permission was previously granted, the code must check that the permission has been granted.</p>\n</li>\n<li><p>This can be achieved via a call to the <code>checkSelfPermission()</code> method of the ContextCompat class, passing through as arguments a reference to the current activity and the permission being requested. The method will check whether the permission has been previously granted and return an integer value matching <code>PackageManager.PERMISSION_GRANTED</code> or <code>PackageManager.PERMISSION_DENIED</code> .</p>\n</li>\n<li><p>Run the app on a device running a version of Android 6.0 and check the log cat output within Android Studio.</p>\n</li>\n<li><p>After the app has launched, the output should include the <strong>“Permission to record denied”</strong> message.</p>\n</li>\n<li><p>Now open up <code>AndroidManifest.xml</code></p>\n</li>\n</ul>\n<pre><code class=\"lang-xml\">&lt;uses-permission android:name=&quot;android.permission.RECORD_AUDIO&quot; /&gt;```\n\n* Compile and run the app once again and note that this time the permission denial message does not appear.\n\n* However, and note that even though permission has been added to the manifest file, the check still reports that permission has been denied. This is because Android 6 requires that the app also request dangerous permissions at runtime.\n</code></pre>\n",
    "path": "14-permissions/intro.md"
  },
  {
    "title": "Dynamic Fragments",
    "heading": "h1",
    "content": "\n<p>Many a times you need a scenario when you want to display different user interface when screen changes its orientation from portrait to landscape.</p>\n<p>We can customize the UI at the runtime using Fragments. Say for example you activity looks good and fills the entire screen when opened in mobile but when opened in tablet which has the bigger screen size than phones then your activity doesn’t fill the screen and may appear less attractive, in these cases you can display more content but manipulating with the Fragments.</p>\n<h1>Implementation of Dynamic Fragments</h1>\n<ul>\n<li><p>First thing you need <code>FragmentManager</code>, Now using FragmentManager instance get <code>FragmentTransaction</code> instance.</p>\n</li>\n<li><p>Using <code>FragmentTransaction</code> instance you can perform fragment transactions which means you can add, remove and replace the fragments.</p>\n</li>\n<li><p>Fragment changes when device changes it orientation. say we want to display Fragment1 when device is in portrait mode and Fragment2 when device is in the landscape mode.</p>\n</li>\n<li><p>So now we just need to know the orientation of the device. That you can get by</p>\n</li>\n</ul>\n<pre><code class=\"lang-java\">int displaymode = getResources().getConfiguration().orientation;\n</code></pre>\n<ul>\n<li>if displaymode =1 then device is in portrait mode else it’s in landscape mode.</li>\n</ul>\n<h3>Fragment1.xml</h3>\n<pre><code class=\"lang-xml\">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    android:orientation=&quot;vertical&quot; &gt;\n\n    &lt;TextView\n        android:id=&quot;@+id/textView1&quot;\n        android:layout_width=&quot;fill_parent&quot;\n        android:layout_height=&quot;fill_parent&quot;\n        android:text=&quot;Iam fragment ONE&quot;\n        android:gravity=&quot;center&quot;\n        android:background=&quot;#5eff6a&quot;\n        android:textAppearance=&quot;?android:attr/textAppearanceLarge&quot; /&gt;\n\n&lt;/LinearLayout&gt;\n</code></pre>\n<h3>Fragment2.xml</h3>\n<pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    android:orientation=&quot;vertical&quot; &gt;\n\n    &lt;TextView\n        android:id=&quot;@+id/textView1&quot;\n        android:layout_width=&quot;fill_parent&quot;\n        android:layout_height=&quot;fill_parent&quot;\n        android:text=&quot;Iam fragment TWO&quot;\n        android:gravity=&quot;center&quot;\n        android:background=&quot;#ff9e5e&quot;\n        android:textAppearance=&quot;?android:attr/textAppearanceLarge&quot; /&gt;\n\n&lt;/LinearLayout&gt;\n</code></pre>\n<h3>activity_main.xml</h3>\n<pre><code class=\"lang-xml\">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n    android:id=&quot;@+id/LinearLayout1&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    android:orientation=&quot;horizontal&quot; &gt;\n&lt;/LinearLayout&gt;\n</code></pre>\n<h3>Fragment1.java</h3>\n<pre><code class=\"lang-java\">package com.stonedcoder.codingblocks.dynamicfragments.\n\nimport android.app.Fragment;\nimport android.os.Bundle;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n\nimport com.example.android.scorekeeper2.R;\n\npublic class Fragment1 extends Fragment {\n    public View onCreateView(LayoutInflater inflater, ViewGroup vg,\n                             Bundle savedInstanceState) {\n        return inflater.inflate(R.layout.fragment1, vg, false);\n    }\n}\n</code></pre>\n<h3>Fragment2.java</h3>\n<pre><code class=\"lang-java\">package com.stonedcoder.codingblocks.dynamicfragments;\nimport android.app.Fragment;\nimport android.os.Bundle;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n\nimport com.example.android.scorekeeper2.R;\n\npublic class Fragment2 extends Fragment {\n    public View onCreateView(LayoutInflater inflater, ViewGroup vg,\n                             Bundle savedInstanceState) {\n        return inflater.inflate(R.layout.fragment2, vg, false);\n    }\n}\n</code></pre>\n<h3>MainActivity.java</h3>\n<pre><code class=\"lang-java\">package com.stonedcoder.codingblocks.dynamicfragments;\n\nimport android.support.v7.app.ActionBarActivity;\nimport android.app.Fragment;\nimport android.app.FragmentManager;\nimport android.app.FragmentTransaction;\nimport android.os.Bundle;\nimport android.view.Display;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.WindowManager;\n\nimport com.example.android.scorekeeper2.R;\n\npublic class MainActivity extends ActionBarActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main);\n\n        FragmentManager fm = getFragmentManager();\n        FragmentTransaction fragmentTransaction = fm.beginTransaction();\n\n        // get the display mode\n        int displaymode = getResources().getConfiguration().orientation;\n        if (displaymode == 1) { // it portrait mode\n            Fragment1 f1 = new Fragment1();\n            fragmentTransaction.replace(android.R.id.content, f1);\n        } else {// its landscape\n            Fragment2 f2 = new Fragment2();\n            fragmentTransaction.replace(android.R.id.content, f2);\n        }\n        fragmentTransaction.commit();\n    }\n}\n</code></pre>\n",
    "path": "13-fragments/13-2-dynamic-fragments.md"
  },
  {
    "title": "Static Fragments",
    "heading": "h1",
    "content": "\n<ul>\n<li><p>Create a blank project .</p>\n</li>\n<li><p>Create <code>Fragment1.java</code> and <code>Fragment2.java</code> which extends the <code>Fragment</code> Class.</p>\n</li>\n<li><p>Override <code>onCreate()</code> method in <code>Fragment1.java</code> and <code>Fragment2.java</code>, and inflate the <code>Fragment layouts ( R.id.Fragment1 and R.id.Fragment2)</code> using <code>LayoutInflater</code> Class object and by passing the <code>ViewGroup</code> argument which is the activity in which the fragment will be embedded.</p>\n</li>\n</ul>\n<h1>Implementation of Static fragments .</h1>\n<ul>\n<li>Add a layout for <code>Fragment1.java</code> .</li>\n</ul>\n<pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    android:orientation=&quot;vertical&quot;&gt;\n\n    &lt;TextView\n        android:id=&quot;@+id/textView1&quot;\n        android:layout_width=&quot;fill_parent&quot;\n        android:layout_height=&quot;fill_parent&quot;\n        android:background=&quot;#5eff6a&quot;\n        android:gravity=&quot;center&quot;\n        android:text=&quot;Iam fragment ONE&quot;\n        android:textAppearance=&quot;?android:attr/textAppearanceLarge&quot; /&gt;\n\n&lt;/LinearLayout&gt;```\n\n* Add a layout for `Fragment2.java` .\n\n```xml\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    android:orientation=&quot;vertical&quot; &gt;\n\n    &lt;TextView\n        android:id=&quot;@+id/textView1&quot;\n        android:layout_width=&quot;fill_parent&quot;\n        android:layout_height=&quot;fill_parent&quot;\n        android:text=&quot;Iam fragment TWO&quot;\n        android:gravity=&quot;center&quot;\n        android:background=&quot;#ff9e5e&quot;\n        android:textAppearance=&quot;?android:attr/textAppearanceLarge&quot; /&gt;\n\n&lt;/LinearLayout&gt;\n</code></pre>\n<ul>\n<li>Now , we&#39;ve to include both the fragments inside <code>activity_main.xml</code> .</li>\n</ul>\n<pre><code class=\"lang-xml\">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n    android:id=&quot;@+id/LinearLayout1&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    android:orientation=&quot;horizontal&quot; &gt;\n\n    &lt;fragment\n        android:id=&quot;@+id/fragment1&quot;\n        android:name=&quot;com.stonedcoder.codingblocks.staticfragments.Fragment1&quot;\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;fill_parent&quot;\n        android:layout_weight=&quot;1&quot; /&gt;\n    &lt;fragment\n        android:id=&quot;@+id/fragment2&quot;\n        android:name=&quot;com.stonedcoder.codingblocks.staticfragments.Fragment2&quot;\n        android:layout_marginLeft=&quot;5sp&quot;\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;fill_parent&quot;\n        android:layout_weight=&quot;1&quot; /&gt;\n\n&lt;/LinearLayout&gt;\n</code></pre>\n<ul>\n<li>Now open up <code>Fragment1.java</code></li>\n</ul>\n<pre><code class=\"lang-java\">package com.stonedcoder.codingblocks.staticfragments;\n\nimport android.annotation.SuppressLint;\nimport android.app.Fragment;\nimport android.os.Bundle;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n\n@SuppressLint(&quot;NewApi&quot;)\npublic class Fragment1 extends Fragment {\n    public View onCreateView(LayoutInflater inflater, ViewGroup vg, Bundle savedInstanceState) {\n        return inflater.inflate(R.layout.fragment1, vg, false);\n\n    }\n}\n</code></pre>\n<ul>\n<li>Now open up <code>Fragment2.java</code></li>\n</ul>\n<pre><code class=\"lang-java\">package com.stonedcoder.codingblocks.staticfragments;\n\nimport android.app.Fragment;\nimport android.os.Bundle;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n\npublic class Fragment2 extends Fragment {\n    public View onCreateView(LayoutInflater inflater, ViewGroup vg, Bundle savedInstanceState) {\n        return inflater.inflate(R.layout.fragment2, vg, false);\n\n    }\n}```\n</code></pre>\n",
    "path": "13-fragments/13-1-static-fragments.md"
  },
  {
    "title": "Fragments",
    "heading": "h1",
    "content": "\n<p>Fragments were introduced in Android 3.0 (API level 11) to provide more flexible and dynamic user interface for bigger screens like tablets because tablets screens are much bigger than the mobile screens so the extra space in the tablets can be utilized for some other useful purpose.</p>\n<ul>\n<li><p>You can think of Fragment like “Sub-Activity”. Using fragments you can have multiple portions in your screen.</p>\n</li>\n<li><p>Fragment contains its own view just like activity.</p>\n</li>\n<li><p>Fragments can be added to an activity dynamically at the run time.</p>\n</li>\n<li><p>Every Fragment has its own life cycle but since they are embedded in an Activity so there life cycle heavily depends on the life cycle of the Activity they are embedded in. Like when an Activity is paused so is the fragment, when activity is destroyed so is the fragment but when the activity is resumed or running you can decide which fragments to add to activity and which to remove.</p>\n</li>\n<li><p>Fragments lives in a ViewGroup insides the activity’s view hierarchy.</p>\n</li>\n</ul>\n",
    "path": "13-fragments/intro.md"
  },
  {
    "path": "11-services/11-3-bound-services.md"
  },
  {
    "path": "11-services/11-2-background-services.md"
  },
  {
    "title": "Foreground Service",
    "heading": "h1",
    "content": "\n<p>Foreground Service in android is a background service which keeps running even after the parent application is closed. And useful when you need user interface while performing long running operations.</p>\n<p>Examples :</p>\n<ul>\n<li>Downloading a file in background from a server.</li>\n<li>Playing songs in background in a music player app.</li>\n<li>Displaying the status of Connection to the server for a chat messaging app.</li>\n</ul>\n",
    "children": [
      {
        "title": "Implementation of Foreground Service.",
        "heading": "h2",
        "content": "\n<ul>\n<li><p>Build a new Android project .</p>\n</li>\n<li><p>Open up <code>activity_main.xml</code>.</p>\n</li>\n<li><p>Now , we&#39;re going to add 2 buttons , which is startService and stopService .</p>\n</li>\n</ul>\n<pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;LinearLayout\n    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;\n    xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    tools:context=&quot;com.codingblocks_projects.stoned_coder.ForegroundServices.MainActivity&quot;&gt;\n\n    &lt;Button android:id=&quot;@+id/btnStartService&quot;\n        android:layout_width=&quot;0dp&quot;\n        android:layout_weight=&quot;1&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;Start Service&quot; /&gt;\n\n    &lt;Button android:id=&quot;@+id/btnStopService&quot;\n        android:layout_width=&quot;0dp&quot;\n        android:layout_weight=&quot;1&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;Start Service&quot; /&gt;\n\n&lt;/LinearLayout&gt;\n</code></pre>\n<ul>\n<li>create a <code>customview.xml</code> in which we&#39;re going to create some custom views for our notification panel .</li>\n</ul>\n<pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:id=&quot;@+id/notification&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:gravity=&quot;center&quot; android:orientation=&quot;horizontal&quot;&gt;\n\n    &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_alignParentLeft=&quot;true&quot; android:layout_toLeftOf=&quot;@+id/llPlayControls&quot; android:padding=&quot;10dp&quot; android:orientation=&quot;vertical&quot; &gt;\n\n        &lt;TextView android:textColor=&quot;#787878&quot; android:id=&quot;@+id/notification_text_title&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:singleLine=&quot;true&quot; android:text=&quot;Song Title&quot; android:textStyle=&quot;bold&quot; android:ellipsize=&quot;end&quot; android:lines=&quot;1&quot; /&gt;\n\n        &lt;TextView android:textColor=&quot;#787878&quot; android:id=&quot;@+id/notification_text_artist&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;artist&quot; android:lines=&quot;1&quot; android:ellipsize=&quot;end&quot; android:singleLine=&quot;true&quot; /&gt;\n\n    &lt;/LinearLayout&gt;\n\n\n    &lt;LinearLayout android:id=&quot;@+id/llPlayControls&quot; android:layout_alignParentRight=&quot;true&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_centerVertical=&quot;true&quot; android:orientation=&quot;horizontal&quot;&gt;\n\n        &lt;ImageView android:id=&quot;@+id/notification_button_prev&quot; android:layout_width=&quot;48dp&quot; android:layout_height=&quot;48dp&quot; android:src=&quot;@android:drawable/ic_media_previous&quot; /&gt;\n        &lt;ImageView android:id=&quot;@+id/notification_button_play&quot; android:layout_width=&quot;48dp&quot; android:layout_height=&quot;48dp&quot; android:src=&quot;@android:drawable/ic_media_play&quot; /&gt;\n\n        &lt;ImageView android:id=&quot;@+id/notification_button_skip&quot; android:layout_width=&quot;48dp&quot; android:layout_height=&quot;48dp&quot; android:src=&quot;@android:drawable/ic_media_next&quot; /&gt;\n        &lt;ImageView android:id=&quot;@+id/notification_button_close&quot; android:layout_width=&quot;48dp&quot; android:layout_height=&quot;48dp&quot; android:src=&quot;@android:drawable/ic_menu_close_clear_cancel&quot; /&gt;\n    &lt;/LinearLayout&gt;\n\n\n\n\n&lt;/RelativeLayout&gt;```\n\n* Now in the ```MainActivity.java``` file inside ``onCreate`` , we&#39;ll be geting refrence fo the buttons and defining 2 intents , one for start and the other being stop .\n\n ```java\n   startButton=(Button)findViewById(R.id.btnStartService);\n stopButton =(Button)findViewById(R.id.btnStopService);\n\n    startButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent startIntent = new Intent(MainActivity.this, ForegroundService.class);\n                startIntent.setAction(Constants.ACTION.STARTFOREGROUND_ACTION);\n                startService(startIntent);\n            }\n        });\n\n    stopButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent stopIntent = new Intent(MainActivity.this, ForegroundService.class);\n                stopIntent.setAction(Constants.ACTION.STOPFOREGROUND_ACTION);\n                startService(stopIntent);\n            }\n        });\n</code></pre>\n<p>We&#39;ll create a new class and name that as <code>Constants.java</code></p>\n<ul>\n<li>This class will contain 2 interfaces one for <code>Actions</code> and other for <code>ServiceID</code></li>\n</ul>\n<pre><code class=\"lang-java\">public class Constants {\n\n   public interface ACTION {\n       public static String MAIN_ACTION = &quot;com.stonedcoder.alertdialog.action.main&quot;;\n       public static String STARTFOREGROUND_ACTION = &quot;com.stonedcoder.alertdialog.action.startforeground&quot;;\n       public static String STOPFOREGROUND_ACTION = &quot;com.stonedcoder.alertdialog.action.stopforeground&quot;;\n   }\n\n   public interface NOTIFICATION_ID {\n       public static int FOREGROUND_SERVICE = 101;\n   }\n}\n</code></pre>\n<ul>\n<li>Now we&#39;ll create another class and name that <code>ForegroundService</code> which holds the logic for custom notification views and service .</li>\n</ul>\n<pre><code class=\"lang-java\">class ForegroundService extends Service {\n    private static final String LOG_TAG = &quot;ForegroundService&quot;;\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n    }\n\n    @Override\n    public int onStartCommand(Intent intent, int flags, int startId) {\n        if (intent.getAction().equals(Constants.ACTION.STARTFOREGROUND_ACTION)) {\n            Toast.makeText(this,&quot;Start Service&quot;,Toast.LENGTH_SHORT).show();\n            Log.i(LOG_TAG, &quot;Received Start Foreground Intent &quot;);\n\n\n            Intent notificationIntent = new Intent(this, MainActivity.class);\n            notificationIntent.setAction(Constants.ACTION.MAIN_ACTION);\n            notificationIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK\n                    | Intent.FLAG_ACTIVITY_CLEAR_TASK);\n            PendingIntent pendingIntent = PendingIntent.getActivity(this, 0,\n                    notificationIntent, 0);\n\n            RemoteViews notificationView = new RemoteViews(this.getPackageName(),R.layout.customviews);\n\n            // And now, building and attaching the Play button.\n            Intent buttonPlayIntent = new Intent(this, NotificationPlayButtonHandler.class);\n            buttonPlayIntent.putExtra(&quot;action&quot;, &quot;togglePause&quot;);\n\n            PendingIntent buttonPlayPendingIntent = pendingIntent.getBroadcast(this, 0, buttonPlayIntent, 0);\n            notificationView.setOnClickPendingIntent(R.id.notification_button_play, buttonPlayPendingIntent);\n\n            // And now, building and attaching the Skip button.\n            Intent buttonSkipIntent = new Intent(this, NotificationSkipButtonHandler.class);\n            buttonSkipIntent.putExtra(&quot;action&quot;, &quot;skip&quot;);\n\n            PendingIntent buttonSkipPendingIntent = pendingIntent.getBroadcast(this, 0, buttonSkipIntent, 0);\n            notificationView.setOnClickPendingIntent(R.id.notification_button_skip, buttonSkipPendingIntent);\n\n            // And now, building and attaching the Skip button.\n            Intent buttonPrevIntent = new Intent(this, NotificationPrevButtonHandler.class);\n            buttonPrevIntent.putExtra(&quot;action&quot;, &quot;prev&quot;);\n\n            PendingIntent buttonPrevPendingIntent = pendingIntent.getBroadcast(this, 0, buttonPrevIntent, 0);\n            notificationView.setOnClickPendingIntent(R.id.notification_button_prev, buttonPrevPendingIntent);\n\n            // And now, building and attaching the Close button.\n            Intent buttonCloseIntent = new Intent(this, NotificationCloseButtonHandler.class);\n            buttonCloseIntent.putExtra(&quot;action&quot;, &quot;close&quot;);\n\n            PendingIntent buttonClosePendingIntent = pendingIntent.getBroadcast(this, 0, buttonCloseIntent, 0);\n            notificationView.setOnClickPendingIntent(R.id.notification_button_close, buttonClosePendingIntent);\n\n\n\n            Bitmap icon = BitmapFactory.decodeResource(getResources(),\n                    R.mipmap.ic_launcher);\n\n            Notification notification = new NotificationCompat.Builder(this)\n                    .setContentTitle(&quot;nkDroid Music Player&quot;)\n                    .setTicker(&quot;nkDroid Music Player&quot;)\n                    .setContentText(&quot;nkDroid Music&quot;)\n                    .setSmallIcon(R.mipmap.ic_launcher)\n                    .setLargeIcon(\n                            Bitmap.createScaledBitmap(icon, 128, 128, false))\n                    .setContent(notificationView)\n                    .setOngoing(true).build();\n\n\n\n            startForeground(Constants.NOTIFICATION_ID.FOREGROUND_SERVICE,\n                    notification);\n        }\n\n\n        else if (intent.getAction().equals(Constants.ACTION.STOPFOREGROUND_ACTION)) {\n            Toast.makeText(this,&quot;Stop Service&quot;,Toast.LENGTH_SHORT).show();\n            Log.i(LOG_TAG, &quot;Received Stop Foreground Intent&quot;);\n            stopForeground(true);\n            stopSelf();\n        }\n        return START_STICKY;\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        Log.i(LOG_TAG, &quot;In onDestroy&quot;);\n    }\n\n    @Override\n    public IBinder onBind(Intent intent) {\n        // Used only in case of bound services.\n        return null;\n    }\n\n\n    /**\n     * Called when user clicks the &quot;play/pause&quot; button on the on-going system Notification.\n     */\n    public static class NotificationPlayButtonHandler extends BroadcastReceiver {\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            Toast.makeText(context,&quot;Play Clicked&quot;,Toast.LENGTH_SHORT).show();\n\n        }\n    }\n\n    /**\n     * Called when user clicks the &quot;skip&quot; button on the on-going system Notification.\n     */\n    public static class NotificationSkipButtonHandler extends BroadcastReceiver {\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            Toast.makeText(context,&quot;Next Clicked&quot;,Toast.LENGTH_SHORT).show();\n        }\n    }\n\n    /**\n     * Called when user clicks the &quot;previous&quot; button on the on-going system Notification.\n     */\n    public static class NotificationPrevButtonHandler extends BroadcastReceiver {\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            Toast.makeText(context,&quot;Previous Clicked&quot;,Toast.LENGTH_SHORT).show();\n        }\n    }\n\n    /**\n     * Called when user clicks the &quot;close&quot; button on the on-going system Notification.\n     */\n    public static class NotificationCloseButtonHandler extends BroadcastReceiver {\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            Toast.makeText(context,&quot;Close Clicked&quot;,Toast.LENGTH_SHORT).show();\n\n        }\n    }\n\n}\n</code></pre>\n<ul>\n<li>Now open up <code>AndroidManifest.xml</code> and add recivers and service to the manifest .</li>\n</ul>\n<pre><code class=\"lang-xml\">&lt;receiver android:name=&quot;.ForegroundService$NotificationCloseButtonHandler&quot; /&gt;\n        &lt;receiver android:name=&quot;.ForegroundService$NotificationPlayButtonHandler&quot; /&gt;\n        &lt;receiver android:name=&quot;.ForegroundService$NotificationPrevButtonHandler&quot; /&gt;\n        &lt;receiver android:name=&quot;.ForegroundService$NotificationSkipButtonHandler&quot; /&gt;\n\n        &lt;service android:name=&quot;.ForegroundService&quot; /&gt;````\n</code></pre>\n"
      }
    ],
    "path": "11-services/11-1-foreground-services.md"
  },
  {
    "title": "Services",
    "heading": "h1",
    "content": "\n",
    "children": [
      {
        "title": "Understanding Service .",
        "heading": "h2",
        "content": "\n<p>Service is some process which is going to run in the android application but they&#39;re going to be the in the background , so the user won&#39;t be able to see the execution of a service .</p>\n<p>There are 3 types of services in android .</p>\n<ul>\n<li>Foreground Service</li>\n<li>Background Service</li>\n<li>Bound Service</li>\n</ul>\n"
      }
    ],
    "path": "11-services/intro.md"
  },
  {
    "title": "Retrofit",
    "heading": "h1",
    "content": "\n<p>Retrofit is a REST Client for Android and Java by Square. It makes it relatively easy to retrieve and upload JSON (or other structured data) via a REST based webservice. In Retrofit you configure which converter is used for the data serialization. Typically for JSON you use GSon, but you can add custom converters to process XML or other protocols. Retrofit uses the OkHttp library for HTTP requests.</p>\n<p>Retrofit 2 by default leverages OkHttp as the networking layer and is built on top of it.</p>\n",
    "children": [
      {
        "title": "Implementation of a Retrofit 2",
        "heading": "h2",
        "content": "\n<ul>\n<li>Build a new project open your <code>build.grade</code>.</li>\n</ul>\n<pre><code class=\"lang-java\">compile &#39;com.squareup.retrofit2:retrofit:2.1.0&#39;\ncompile &#39;com.google.code.gson:gson:2.6.2&#39;\ncompile &#39;com.squareup.retrofit2:converter-gson:2.1.0&#39;\n</code></pre>\n<ul>\n<li>OkHttp dependency is already shipped with Retrofit 2 dependency. If you wish to use a separate OkHttp dependency, you should exclude the OkHttp dependency from Retrofit 2 as:</li>\n</ul>\n<pre><code class=\"lang-java\">compile (&#39;com.squareup.retrofit2:retrofit:2.1.0&#39;) {\n// exclude Retrofit’s OkHttp dependency module and define your own module import\nexclude module: &#39;okhttp&#39;\n}\ncompile &#39;com.google.code.gson:gson:2.6.2&#39;\ncompile &#39;com.squareup.retrofit2:converter-gson:2.1.0&#39;\ncompile &#39;com.squareup.okhttp3:logging-interceptor:3.4.1&#39;\ncompile &#39;com.squareup.okhttp3:okhttp:3.4.1&#39;\n</code></pre>\n<ul>\n<li><p>The logging-interceptor generates a log string of the entire response that’s returned.</p>\n</li>\n<li><p>Add the permission to access internet in the AndroidManifest.xml file.</p>\n</li>\n</ul>\n<pre><code class=\"lang-xml\">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;\n</code></pre>\n<h1>OkHttp Interceptors</h1>\n<p>Interceptors are a powerful mechanism present in OkHttp that can monitor, rewrite, and retry calls.<br>Interceptors can be majorly divided into two categories:</p>\n<ul>\n<li><p>Application Interceptors : To register an application interceptor, we need to call addInterceptor() on OkHttpClient.Builder</p>\n</li>\n<li><p>Network Interceptors : To register a Network Interceptor, invoke addNetworkInterceptor() instead of addInterceptor()</p>\n</li>\n</ul>\n<h1>Setting Up the Retrofit Interface</h1>\n<p>The getClient() method in the below code will be called every time while setting up a Retrofit interface. Retrofit provides with a list of annotations for each of the HTTP methods: @GET, @POST, @PUT, @DELETE, @PATCH or @HEAD.</p>\n<pre><code class=\"lang-java\">package Stonedcoder.coding-blocks.retrofit;\n\nimport Stonedcoder.coding-blocks.retrofit.pojo.MultipleResource;\nimport okhttp3.OkHttpClient;\nimport okhttp3.logging.HttpLoggingInterceptor;\nimport retrofit2.Retrofit;\nimport retrofit2.converter.gson.GsonConverterFactory;\n\nclass APIClient {\n    private static Retrofit retrofit = null;\n    static Retrofit getClient() {\n        HttpLoggingInterceptor interceptor = new HttpLoggingInterceptor();\n        interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);\n\n        OkHttpClient client=newOkHttpClient.Builder().addInterceptor(interceptor).build();\n        retrofit = new Retrofit.Builder() .baseUrl(&quot;https://reqres.in&quot;) .addConverterFactory(GsonConverterFactory.create()).client(client).build();\n        return retrofit;\n    }\n}\n</code></pre>\n<ul>\n<li>Create a class <code>APIInterface.java</code> .</li>\n</ul>\n<pre><code class=\"lang-java\">import Stonedcoder.coding-blocks.retrofit.pojo.MultipleResource;\nimport Stonedcoder.coding-blocks.retrofit.pojo.User;\nimport Stonedcoder.coding-blocks.retrofit.pojo.UserList;\n\nimport retrofit2.Call;\nimport retrofit2.http.Body;\nimport retrofit2.http.Field;\nimport retrofit2.http.FormUrlEncoded;\nimport retrofit2.http.GET;\nimport retrofit2.http.POST;\nimport retrofit2.http.Query;\n\ninterface APIInterface {\n\n@GET(&quot;/api/unknown&quot;)\nCall&lt;MultipleResource&gt; doGetListResources();\n\n@POST(&quot;/api/users&quot;)\nCall&lt;User&gt; createUser(@Body User user);\n\n@GET(&quot;/api/users?&quot;)\nCall&lt;UserList&gt; doGetUserList(@Query(&quot;page&quot;) String page);\n\n@FormUrlEncoded\n@POST(&quot;/api/users?&quot;)\nCall&lt;UserList&gt; doCreateUserWithField(@Field(&quot;name&quot;) String name, @Field(&quot;job&quot;) String job);\n}\n</code></pre>\n<ul>\n<li>In the above class, we’ve defined some methods that perform HTTP requests with annotation.</li>\n</ul>\n<p><code>@GET(&quot;/api/unknown&quot;) calls doGetListResources();</code></p>\n<p><code>doGetListResources()</code> is the method name. MultipleResource.java is a Model POJO class for our response object that’s used to map the response parameters to their respective variables. These POJO class act as the method return type.</p>\n<ul>\n<li>create a new POJO class for <code>MultipleResources.java</code></li>\n</ul>\n<pre><code class=\"lang-java\">package Stonedcoder.coding-blocks.retrofit.pojo;\nimport com.google.gson.annotations.SerializedName;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class MultipleResource {\n\n@SerializedName(&quot;page&quot;)\npublic Integer page;\n@SerializedName(&quot;per_page&quot;)\npublic Integer perPage;\n@SerializedName(&quot;total&quot;)\npublic Integer total;\n@SerializedName(&quot;total_pages&quot;)\npublic Integer totalPages;\n@SerializedName(&quot;data&quot;)\npublic List data = null;\n\npublic class Datum {\n\n@SerializedName(&quot;id&quot;)\npublic Integer id;\n@SerializedName(&quot;name&quot;)\npublic String name;\n@SerializedName(&quot;year&quot;)\npublic Integer year;\n@SerializedName(&quot;pantone_value&quot;)\npublic String pantoneValue;\n\n}\n}\n</code></pre>\n<p><code>@SerializedName</code> annotation is used to specify the name of the field that’s in the JSON Response.</p>\n<p>To create a POJO class for each response, we can go to <a href=\"http://www.jsonschema2pojo.org/\">http://www.jsonschema2pojo.org/</a> and paste the json response structure as shown below.</p>\n<pre><code class=\"lang-json\">{\n  &quot;page&quot;: 1,\n  &quot;per_page&quot;: 3,\n  &quot;total_pages&quot;: 4,\n  &quot;data&quot;: [\n    {\n      &quot;id&quot;: 1,\n      &quot;name&quot;: &quot;cerulean&quot;,\n      &quot;year&quot;: 2000,\n      &quot;pantone_value&quot;: &quot;19-2031&quot;\n    },\n    {\n      &quot;id&quot;: 2,\n      &quot;name&quot;: &quot;fuchsia rose&quot;,\n      &quot;year&quot;: 2001,\n      &quot;pantone_value&quot;: &quot;20-2031&quot;\n    },\n    {\n      &quot;id&quot;: 3,\n      &quot;name&quot;: &quot;true red&quot;,\n      &quot;year&quot;: 2002,\n      &quot;pantone_value&quot;: &quot;21-2031&quot;\n    }\n  ]\n}\n</code></pre>\n<ul>\n<li><p>The POJO classes are wrapped into a typed Retrofit Call class.</p>\n</li>\n<li><p>Method Parameters : There are a wide variety of possible options of parameters to pass inside a method:</p>\n</li>\n</ul>\n<pre><code class=\"lang-java\">@Body – Sends Java objects as request body.\n@Url – use dynamic URLs.\n@Query – We can simply add a method parameter with @Query() and a query parameter name, describing the type. To URL encode a query use the form:\n@Query(value = &quot;auth_token&quot;,encoded = true) String auth_token\n@Field – send data as form-urlencoded. This requires a @FormUrlEncoded annotation attached with the method.\n</code></pre>\n<p>The @Field parameter works only with a POST</p>\n<ul>\n<li>Note: @Field requires a mandatory parameter. In cases when <code>@Field</code> is optional, we can use <code>@Query</code> instead and pass a null value.</li>\n</ul>\n<p>The pojo package defines four model classes for each of the API endpoint responses defined in the <code>APIInterface.java</code> class.</p>\n<ul>\n<li>Create a class <code>User.java</code></li>\n</ul>\n<pre><code class=\"lang-java\">package Stonedcoder.coding-blocks.retrofit.pojo;\nimport com.google.gson.annotations.SerializedName;\n\npublic class User {\n\n@SerializedName(&quot;name&quot;)\npublic String name;\n@SerializedName(&quot;job&quot;)\npublic String job;\n@SerializedName(&quot;id&quot;)\npublic String id;\n@SerializedName(&quot;createdAt&quot;)\npublic String createdAt;\n\npublic User(String name, String job) {\nthis.name = name;\nthis.job = job;\n}\n}\n</code></pre>\n<p>The above class is used to create the Response Body for the <code>createUser()</code> method.</p>\n<ul>\n<li>Create a class <code>UserList.java</code></li>\n</ul>\n<pre><code class=\"lang-java\">package Stonedcoder.coding-blocks.retrofit.pojo;\nimport com.google.gson.annotations.SerializedName;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class UserList {\n\n@SerializedName(&quot;page&quot;)\npublic Integer page;\n@SerializedName(&quot;per_page&quot;)\npublic Integer perPage;\n@SerializedName(&quot;total&quot;)\npublic Integer total;\n@SerializedName(&quot;total_pages&quot;)\npublic Integer totalPages;\n@SerializedName(&quot;data&quot;)\npublic List data = new ArrayList();\n\npublic class Datum {\n\n@SerializedName(&quot;id&quot;)\npublic Integer id;\n@SerializedName(&quot;first_name&quot;)\npublic String first_name;\n@SerializedName(&quot;last_name&quot;)\npublic String last_name;\n@SerializedName(&quot;avatar&quot;)\npublic String avatar;\n\n}\n}\n</code></pre>\n<ul>\n<li>Create <code>UserResponse.java</code></li>\n</ul>\n<pre><code class=\"lang-java\">package Stonedcoder.coding-blocks.retrofit.pojo;\nimport com.google.gson.annotations.SerializedName;\n\npublic class CreateUserResponse {\n\n@SerializedName(&quot;name&quot;)\npublic String name;\n@SerializedName(&quot;job&quot;)\npublic String job;\n@SerializedName(&quot;id&quot;)\npublic String id;\n@SerializedName(&quot;createdAt&quot;)\npublic String createdAt;\n}\n</code></pre>\n<ul>\n<li>The <code>MainActivity.java</code> is where we call each of the API endpoints defined in the Interface class and display each of the fields in a Toast/TextView.</li>\n</ul>\n<pre><code class=\"lang-java\">import android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport Stonedcoder.coding-blocks.retrofit.pojo.CreateUserResponse;\nimport Stonedcoder.coding-blocks.retrofit.pojo.MultipleResource;\nimport Stonedcoder.coding-blocks.retrofit.pojo.User;\nimport Stonedcoder.coding-blocks.retrofit.UserList;\n\nimport java.util.List;\n\nimport retrofit2.Call;\nimport retrofit2.Callback;\nimport retrofit2.Response;\n\npublic class MainActivity extends AppCompatActivity {\n\nTextView responseText;\nAPIInterface apiInterface;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.activity_main);\nresponseText = (TextView) findViewById(R.id.responseText);\napiInterface = APIClient.getClient().create(APIInterface.class);\n\n\n/**\nGET List Resources\n**/\nCall call = apiInterface.doGetListResources();\ncall.enqueue(new Callback() {\n@Override\npublic void onResponse(Call call, Response response) {\n\nLog.d(&quot;TAG&quot;,response.code()+&quot;&quot;);\n\nString displayResponse = &quot;&quot;;\n\nMultipleResource resource = response.body();\nInteger text = resource.page;\nInteger total = resource.total;\nInteger totalPages = resource.totalPages;\nList datumList = resource.data;\n\ndisplayResponse += text + &quot; Page\\n&quot; + total + &quot; Total\\n&quot; + totalPages + &quot; Total Pages\\n&quot;;\n\nfor (MultipleResource.Datum datum : datumList) {\ndisplayResponse += datum.id + &quot; &quot; + datum.name + &quot; &quot; + datum.pantoneValue + &quot; &quot; + datum.year + &quot;\\n&quot;;\n}\n\nresponseText.setText(displayResponse);\n\n}\n\n@Override\npublic void onFailure(Call call, Throwable t) {\ncall.cancel();\n}\n});\n\n/**\nCreate new user\n**/\nUser user = new User(&quot;morpheus&quot;, &quot;leader&quot;);\nCall call1 = apiInterface.createUser(user);\ncall1.enqueue(new Callback() {\n@Override\npublic void onResponse(Call call, Response response) {\nUser user1 = response.body();\n\nToast.makeText(getApplicationContext(), user1.name + &quot; &quot; + user1.job + &quot; &quot; + user1.id + &quot; &quot; + user1.createdAt, Toast.LENGTH_SHORT).show();\n\n}\n\n@Override\npublic void onFailure(Call call, Throwable t) {\ncall.cancel();\n}\n});\n\n/**\nGET List Users\n**/\nCall call2 = apiInterface.doGetUserList(&quot;2&quot;);\ncall2.enqueue(new Callback() {\n@Override\npublic void onResponse(Call call, Response response) {\n\nUserList userList = response.body();\nInteger text = userList.page;\nInteger total = userList.total;\nInteger totalPages = userList.totalPages;\nList datumList = userList.data;\nToast.makeText(getApplicationContext(), text + &quot; page\\n&quot; + total + &quot; total\\n&quot; + totalPages + &quot; totalPages\\n&quot;, Toast.LENGTH_SHORT).show();\n\nfor (UserList.Datum datum : datumList) {\nToast.makeText(getApplicationContext(), &quot;id : &quot; + datum.id + &quot; name: &quot; + datum.first_name + &quot; &quot; + datum.last_name + &quot; avatar: &quot; + datum.avatar, Toast.LENGTH_SHORT).show();\n}\n\n\n}\n\n@Override\npublic void onFailure(Call call, Throwable t) {\ncall.cancel();\n}\n});\n\n\n/**\nPOST name and job Url encoded.\n**/\nCall call3 = apiInterface.doCreateUserWithField(&quot;morpheus&quot;,&quot;leader&quot;);\ncall3.enqueue(new Callback() {\n@Override\npublic void onResponse(Call call, Response response) {\nUserList userList = response.body();\nInteger text = userList.page;\nInteger total = userList.total;\nInteger totalPages = userList.totalPages;\nList datumList = userList.data;\nToast.makeText(getApplicationContext(), text + &quot; page\\n&quot; + total + &quot; total\\n&quot; + totalPages + &quot; totalPages\\n&quot;, Toast.LENGTH_SHORT).show();\n\nfor (UserList.Datum datum : datumList) {\nToast.makeText(getApplicationContext(), &quot;id : &quot; + datum.id + &quot; name: &quot; + datum.first_name + &quot; &quot; + datum.last_name + &quot; avatar: &quot; + datum.avatar, Toast.LENGTH_SHORT).show();\n}\n\n}\n\n@Override\npublic void onFailure(Call call, Throwable t) {\ncall.cancel();\n}\n});\n\n}\n}\n</code></pre>\n<p><code>apiInterface = APIClient.getClient().create(APIInterface.class);</code> is used to instantiate the APIClient.<br>To map the Model class to the response we use:</p>\n<p><code>MultipleResource resource = response.body();</code></p>\n"
      }
    ],
    "path": "10-retrofit/intro.md"
  },
  {
    "title": "RecyclerView",
    "heading": "h1",
    "content": "\n<p>Many apps need to display user-interface elements based on large data sets, or data that frequently changes. For example, a music app might need to display information about thousands of albums, but only a dozen of those albums might be on-screen at a time. If the app created UI widgets for each of those albums, the app would end up using a lot of memory and storage, potentially making the app slow and crash-prone. On the other hand, if the app created UI widgets each time a new album scrolled onto the screen and destroyed the widgets when it scrolled off, that would also cause the app to run slowly, since creating UI objects is a resource-intensive operation.</p>\n<p>To address the above problem Recycler View is used to show list items on the Android. It is similar to ListView in terms of layout on the screen. But has a major difference in the way both are implemented.</p>\n<p>In ListView we have an option to use ViewHolder pattern for good performance. But RecyclerView enforces us to recycle the views created on the screen. Like if 5 items are being displayed on your screen, then only 7 items will be in the memory(one extra above and below the screen). When user scrolls, the views are recycled by binding item with different data.</p>\n<p>Also, in ListView it is optional to uses ViewGroup containers but in RecyclerView, the layout has to be inflated inside the container. This helps as the shape of the containers can be modified to get different types of list. The RecyclerView list can be horizontal, vertical etc.</p>\n<p>To use RecyclerView we need to follow 6 steps which are explained in detail below :-</p>\n<ol>\n<li><p>Add RecyclerView support library to the gradle build file</p>\n<pre><code class=\"lang-java\">compile &#39;com.android.support:recyclerview-v7:26.1.0&#39;\n</code></pre>\n</li>\n<li><p>Each list Item needs a data source. We will create a Course model/POJO class as our data source</p>\n<pre><code class=\"lang-java\">public class Course {\n    private String name, instructor;\n    private int batchStrength;\n\n    public Course(String name, String instructor, int batchStrength) {\n        this.name = name;\n        this.instructor = instructor;\n        this.batchStrength = batchStrength;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getInstructor() {\n        return instructor;\n    }\n\n    public int getBatchStrength() {\n        return batchStrength;\n    }\n}\n</code></pre>\n</li>\n<li><p>Add RecyclerView to your activity/fragment XML file</p>\n<pre><code class=\"lang-xml\">&lt;android.support.v7.widget.RecyclerView\n    android:id=&quot;@+id/rvCourseList&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot; /&gt;\n</code></pre>\n</li>\n<li><p>Now we need to create a custom XML row item layout which will be used as the layout for each row. Go to layout folder in res, right click and select New -&gt; resource Layout file. In demo project it is named as list_item_course.xml</p>\n<pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;wrap_content&quot;\n    android:layout_margin=&quot;10dp&quot;\n    android:orientation=&quot;vertical&quot;&gt;\n\n    &lt;TextView\n        android:id=&quot;@+id/tvCourseName&quot;\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;text1&quot;\n        android:textAppearance=&quot;@android:style/TextAppearance.Large&quot; /&gt;\n\n    &lt;TextView\n        android:id=&quot;@+id/tvInstName&quot;\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;text2&quot;\n        android:textAppearance=&quot;@android:style/TextAppearance.Large&quot; /&gt;\n\n    &lt;TextView\n        android:id=&quot;@+id/tvBatchStrength&quot;\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;text3&quot;\n        android:textAppearance=&quot;@android:style/TextAppearance.Large&quot; /&gt;\n&lt;/LinearLayout&gt;\n</code></pre>\n</li>\n<li><p>Now we make the RecyclerView adapter. We make a java class lets say CourseAdapter. We extend RecyclerView.Adapter but it needs a ViewHolder class. So inside CourseAdapter, we create ViewHolder class which extends from RecyclerView.ViewHolder. Then send use ViewHolder class in our CourseAdapter class.\nWe have to implement three methods as follows -</p>\n</li>\n<li><p><strong>public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType)</strong></p>\n<p>This is called when the layouts are first time created on the screen. Item layout is inflated inside the parent container and ViewHolder is created for this view, whose object needs to be returned.</p>\n</li>\n<li><p><strong>public void onBindViewHolder(ViewHolder holder, int position)</strong></p>\n<p>This is called to bind our views with the data. method uses the view holder&#39;s position to determine what the contents should be. It gets the view holder of the layout item which populates data into the item through holder</p>\n</li>\n<li><p><strong>public int getItemCount()</strong></p>\n<p>This returns the number of list items.</p>\n<p>We make constructor for Adapter with context(needed to inflate the view) and arrayList which acts as a data source.</p>\n<p>The final code of adapter is as below.</p>\n<pre><code class=\"lang-java\">public class CourseAdapter extends RecyclerView.Adapter&lt;CourseAdapter.ViewHolder&gt;{\n\n    private Context context;\n    private ArrayList&lt;Course&gt; courseList = new ArrayList&lt;&gt;();\n\n    public CourseAdapter(Context context, ArrayList&lt;Course&gt; courseList) {\n        this.context = context;\n        this.courseList = courseList;\n\n    }\n\n    @Override\n    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n\n        //inflate has three parameters, layout to inflate, container in which it needs to be inflated\n        // attach to root layout, should be false\n        View v = LayoutInflater.from(context).inflate(R.layout.list_item_course, parent, false);\n        return new ViewHolder(v);  // returns a viewHolder object\n    }\n\n    @Override\n    public void onBindViewHolder(ViewHolder holder, int position) {\n        //Get the desired data\n        String courseName = courseList.get(position).getName();\n        String instructorName = courseList.get(position).getInstructor();\n        int batchStrength = courseList.get(position).getBatchStrength();\n\n        //Binding the data with help of viewholder\n        holder.tvCourseName.setText(courseName);\n        holder.tvInstructorName.setText(instructorName);\n        holder.tvBatchStrength.setText(String.valueOf(batchStrength));\n\n    }\n\n    @Override\n    public int getItemCount() {\n        return courseList.size();\n    }\n\n    // Provide a direct reference to each of the views within a data item\n    public class ViewHolder extends RecyclerView.ViewHolder{\n\n        TextView tvCourseName, tvInstructorName, tvBatchStrength;\n\n        // findviewbyid is costly operation so we do it only once for each view which are recycled\n        public ViewHolder(View itemView) {\n            super(itemView);\n\n            tvCourseName = itemView.findViewById(R.id.tvCourseName);\n            tvInstructorName = itemView.findViewById(R.id.tvInstName);\n            tvBatchStrength = itemView.findViewById(R.id.tvBatchStrength);\n        }\n    }\n}\n</code></pre>\n</li>\n<li><p>Finally we need to set Adapter on RecyclerView in Activtiy like below</p>\n<pre><code class=\"lang-java\">RecyclerView rvCourseList = findViewById(R.id.rvCourseList);\n// Linear Layout Manager for item =s in row form\nrvCourseList.setLayoutManager(new LinearLayoutManager(this));\n//getCourseList gives ArrayList of our model class Courses\nrvCourseList.setAdapter(new CourseAdapter(this, getCourseList()));\n</code></pre>\n</li>\n</ol>\n<p>Screen will look like as</p>\n<p><img src=\"./img/recycle.png\" alt=\"\"></p>\n",
    "path": "09-recycler-view/intro.md"
  },
  {
    "title": "Android Network Operations",
    "heading": "h1",
    "content": "\n<p>All the network requests have to be performed over a protocol. It can be over HTTP or FTP and this defines the format of the payload of the reuest. Like FTP will have a FTP payload/packet and will not be able to read HTTP payload. Hence, it is important to define a protocol in any network request. We will be using HTTP request.</p>\n<p>We need a protocol client to handle a protocol. We will set up an HTTP protocol client to send HTTP requests. This request are sent and the data recieved through the streams.\nNow we understand what actually streams are.</p>\n<p><strong>Stream</strong>-&gt; We require streams to read and write data to the files from your program. Whenever our program has to get data from an external source it is Input Stream. Whenever our program has to write data, it is output stream. The streams are always seen w.r.t to your program.</p>\n<p>Now the main question is, why do we need streams? Why can&#39;t we just simply read all data at once?\nThere are basically two reasons</p>\n<ol>\n<li><p>The speed of the data to your program will be different from the rate at which your program can read. To synchronize this data speed we need streams.</p>\n</li>\n<li><p>We don&#39;t have large RAM space. So we can&#39;t always read or write a file in the RAM. Only some part of the file must be present, so when we read a file/write, we do it in chunks. And these chunks are what makes the stream.</p>\n</li>\n</ol>\n<p>We also need a buffer to store the file in a local buffer, which when full, data is read from it.</p>\n<p>Android performs network related operations on the background thread. Response from the server take variable time and UI thread can&#39;t be blocked for that long. So we use AsyncTask to send the network request in the background.</p>\n<p>So in Android we will be using all of the above for the network request. We open a URL connection. It gives a InputStream to read bytes from the network and to read data from Stream we use buffered reader.</p>\n<p>To make a network request in the app, we need to add permission in the manifest file.</p>\n<pre><code class=\"lang-xml\">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;\n</code></pre>\n<p>We start by making a AsyncTask. And our downloaded Asynctask will look like</p>\n<pre><code class=\"lang-java\">public class DownloadAsyncTask extends AsyncTask&lt;String, Void, String&gt; {\n\n\n    private TextView tvResult;\n\n\n    public DownloadAsyncTask(TextView tvResult) {\n        this.tvResult = tvResult;\n    }\n\n\n    protected String doInBackground(String... strings) {\n        // Some long-running task in backgorund\n\n        URL url = null;\n        String result = &quot;&quot;;\n        try {\n            url = new URL(strings[0]);\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        }\n\n        HttpURLConnection connection = null;\n\n        try {\n            //Sets up HTTP URL connection\n            connection = (HttpURLConnection) url.openConnection();\n            //Gives the data in form of bytes\n            InputStream netInputStream = connection.getInputStream();\n\n            //Converts that byte data using charset\n            InputStreamReader isr = new InputStreamReader(netInputStream);\n\n            //Helps read data in chunks\n            BufferedReader br = new BufferedReader(isr);\n\n            StringBuilder sb = new StringBuilder();\n            String buffer = &quot;&quot;;\n\n            while(buffer!=null) {\n                sb.append(buffer);\n                buffer = br.readLine(); // Returns null after all work\n            }\n\n            result = sb.toString();\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n\n    protected void onPostExecute(String result) {\n        tvResult.setText(result);\n\n    }\n}\n</code></pre>\n<p>We call this AsyncTask from our activity like</p>\n<pre><code class=\"lang-java\">new DownloadAsyncTask((TextView) findViewById(R.id.tvResult))\n                .execute(&quot;http://example.com&quot;);\n</code></pre>\n<p><img src=\"./img/asynDownload.png\" alt=\"\"></p>\n",
    "path": "08-network-operations/intro.md"
  },
  {
    "title": "Async Tasks",
    "heading": "h1",
    "content": "\n<p>The concept of Async Tasks is similar to the concept of Threads in Java. Like in java, we can create multiple threads and other than that there is a main thread on which runs the majority of the program. Similarly, in android there is a UI thread(user interface thread) on which most of the operations like clicking, scrolling etc. are done and the tasks that take some time to finish are performed on some other thread so that the UI thread is not blocked.</p>\n<p>Hence, Async task(asynchronus tasks) come in use when the operations like fetching data from server or downloading a file are to performed. These tasks are problematic not only because if performed on the main thread, it will block the thread and no other operation can be done but also, if the task takes more than 5 seconds to complete then that application will crash and will report <strong>ApplicationNotResponding</strong>.</p>\n<p>Thus to prevent this, these tasks should be performed using async task which will perform the operation on a background thread and the result will be published on the main UI thread. However, async tasks should be used only to perform small tasks ( the ones which take only a few seconds to compute).</p>\n<p>For implementation of the Asynchronus tasks, an inner class has to be created in the activity which inherits the <strong>AsyncTask</strong> class.</p>\n",
    "children": [
      {
        "title": "Async Task Generic Types",
        "heading": "h2",
        "content": "\n<p>The three types used by an asynchronous task are the following:</p>\n<ul>\n<li><strong>Params</strong>, the type of the parameters sent to the task upon execution.</li>\n<li><strong>Progress</strong>, the type of the progress units published during the background computation.</li>\n<li><strong>Result</strong>, the type of the result of the background computation.</li>\n</ul>\n<p>Not all types are always used by an asynchronous task. To mark a type as unused, simply use the type Void.</p>\n<pre><code>Private class MyTask extends AsyncTask&lt;Void, Void, Void&gt; {…}\n</code></pre><p>Now there are four methods that are to defined, however only one of them (doInBackground) is compulsory. The four methods are as follows:</p>\n<ol>\n<li><p><strong>onPreExecute():</strong>\nThis method runs on the UI thread and is used primarily for setting up the task like displaying the progress bar.</p>\n</li>\n<li><p><strong>doInBackground(Params..):</strong>\nThis method takes in an array of Parameters that is used to begin the task like the url of the image to be downloaded or the url from which the data is to be fetched.\nIt runs on the background thread.\nIt begins as soon as the execution of the <code>onPreExecute()</code> is over.</p>\n</li>\n<li><p><strong>onProgressUpdate(Progress..):</strong>\nThis method too runs on the UI thread and is used to diplay the progress of the task. For example, it is used to show what percent of the file has been downloaded in the form of a progress bar.\nThe parameter Progress are passed from the <code>doInBackground()</code> method. </p>\n</li>\n<li><p><strong>onPostExecute(Result..):</strong>\nThis method also runs on the UI thread and starts after the execution of the <code>doInBackground()</code> method is completed.The result is passed on to this method as a parameter from the doInBackground method.\nIt is used to publish the result of the doInBackground method on the UI thread.</p>\n</li>\n</ol>\n<p>However, the point to be noted is that none of the four methods mentioned above, should be called directly from the main thread.</p>\n"
      },
      {
        "title": "Execution Flow",
        "heading": "h2",
        "content": "\n<p>All you have to do is to call the <code>execute()</code> method on the object of the inner class from the main thread.\nThe execute method then calls the <code>onPreExecute()</code> on the UI thread <strong>automatically</strong>.\nNext, the <code>doInBackground()</code> method is called (again <strong>automatically</strong>) on the background thread.\nFrom the doInBackground, you have to call the <code>PublishProgress()</code> method <strong>manually</strong> which further calls the <code>OnProgressUpdate()</code> on the UI thread.\nFinally after the completion of the doInBackground method, the <code>PostExecute</code> method is called(automatically) and after its execution, the control is finally passed back to the UI thread.</p>\n"
      },
      {
        "title": "Cancelling the task",
        "heading": "h2",
        "content": "\n<p>To cancel the task just invoke <code>cancel(Boolean)</code>. Invoking this method will cause subsequent calls to <code>isCancelled()</code> to return true. After invoking this method, onCancelled(Object) will be invoked instead of <code>onPostExecute(Object)</code> after the execution of <code>doInBackground(Object[])</code> is over</p>\n"
      },
      {
        "title": "Code",
        "heading": "h2",
        "content": "\n<p>Create a class for the task to be performed: </p>\n<pre><code>internal class NSecWaitTask(private val tvToChange: TextView) : AsyncTask&lt;Int, Float, String&gt;() {\n\n    override fun onPreExecute() {\n        tvToChange.text = &quot;Starting&quot;\n        super.onPreExecute()\n    }\n\n    override fun doInBackground(vararg params: Int?): String {\n        for (i in 0 until params[0]!! * 2) {\n            val startTime = System.currentTimeMillis()\n            while (System.currentTimeMillis() &lt; startTime + 500);\n            publishProgress(i.toFloat() / 2)\n        }\n        return &quot;Done&quot;\n    }\n\n    override fun onProgressUpdate(vararg values: Float?) {\n        tvToChange.text = values[0].toString()\n        super.onProgressUpdate(*values)\n    }\n\n    override fun onPostExecute(s: String) {\n\n        tvToChange.text = s\n        super.onPostExecute(s)\n    }\n}\n</code></pre><p>From the main thread, call the asynchronus task using the execute() method. The UI thread will not be blocked while the task gets completed on some other thread.</p>\n<pre><code>button!!.setOnClickListener {\n            val myTask = NSecWaitTask(textView)\n            myTask.execute(Integer.valueOf(editText!!.text.toString()))\n        }\n\nbutton2!!.setOnClickListener {\n            textView.text = &quot;Button2 still working..&quot;;\n        }\n</code></pre>"
      }
    ],
    "path": "07-asynctask/intro.md"
  },
  {
    "title": "BroadcastReceivers",
    "heading": "h1",
    "content": "\n<p>BroadcastReceiver is one of the building blocks in Android. You can sendBroadcast with an action in an Intent and the Receiver can receive this action and do something about it. Here is an example of sending some custom intents and a receiver will receive them and act accordingly.</p>\n",
    "children": [
      {
        "title": "Implementation of a BroadcastReceiver",
        "heading": "h2",
        "content": "\n<ul>\n<li>Build a new project create a class called <code>SimpleReciver</code>.</li>\n</ul>\n<pre><code class=\"lang-java\">public class SimpleReceiver extends BroadcastReceiver {\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        if (intent.getAction() == &quot;com.example.simplebroadcastreceiver.CUSTOM_INTENT1&quot;) {\n            Toast.makeText(context, &quot;Intent 1 Detected.&quot;, Toast.LENGTH_SHORT).show();\n        } else if (intent.getAction() == &quot;com.example.simplebroadcastreceiver.CUSTOM_INTENT2&quot;) {\n            Toast.makeText(context, &quot;Intent 2 Detected.&quot;, Toast.LENGTH_SHORT).show();\n        }\n    }\n\n}```\n\n* Register the above class in the manifest .\n\n```xml\n&lt;receiver android:name=&quot;.SimpleReceiver&quot;&gt;\n    &lt;intent-filter&gt;\n        &lt;action android:name=&quot;com.example.simplebroadcastreceiver.CUSTOM_INTENT1&quot;&gt;&lt;/action&gt;\n        &lt;action android:name=&quot;com.example.simplebroadcastreceiver.CUSTOM_INTENT2&quot;&gt;&lt;/action&gt;\n    &lt;/intent-filter&gt;\n&lt;/receiver&gt; ````\n\n* Create an Activity class to send the broadcast intents. When one of the button is clicked, it sends a broadcast with an action in an Intent, and that intent will be received in the `onReceive()` method in the `SimpleReceiver` class.\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n\n    // broadcast a custom intent.\n    public void broadcastIntent1(View view) {\n        Intent intent = new Intent();\n        intent.setAction(&quot;com.example.simplebroadcastreceiver.CUSTOM_INTENT1&quot;);\n        sendBroadcast(intent);\n    }\n\n    // broadcast a custom intent.\n    public void broadcastIntent2(View view) {\n        Intent intent = new Intent();\n        intent.setAction(&quot;com.example.simplebroadcastreceiver.CUSTOM_INTENT2&quot;);\n        sendBroadcast(intent);\n    }\n}```\n\n* Now , open up `activity_main.xml` for the layout .\n* Create 2 buttons for `Intent1` and `Intent2` .\n\n```xml\n\n    &lt;Button android:id=&quot;@+id/btn_broadcast_intent1&quot;\n        android:layout_width=&quot;fill_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;Broadcast Action 1&quot;\n        android:onClick=&quot;broadcastIntent1&quot;/&gt;\n\n    &lt;Button android:id=&quot;@+id/btn_broadcast_intent2&quot;\n        android:layout_width=&quot;fill_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;Broadcast Action 2&quot;\n        android:onClick=&quot;broadcastIntent2&quot;/&gt;\n</code></pre>\n"
      }
    ],
    "path": "06-broadcasts-receivers/intro.md"
  },
  {
    "title": "Database",
    "heading": "h1",
    "content": "\n<p>Do you want to store and save data of your Android application in your device? </p>\n<p>The solution is very easy as Android use <strong>SQLite</strong> as it’s default built-in database. SQLite is a light weight relational database. SQLite stores data of your application in a text file. SQLite database supports standard features of relational database. Every device has an inbuilt support for SQLite database, which is automatically managed on android right from its creation, execution to querying up process. SQLite is an open source database, available on every android database. It supports standard relations database features, like SQL syntax, transactions &amp; SQL statements. SQLite is considerably, the lighter version of SQL database, where most of the SQL commands don’t run on SQLite database. Once SQLite is in place, it is important to ensure that a feature or command is available in SQLite; only then can it be executed. </p>\n<ul>\n<li><code>android.database.sqlite</code> package has all you need to save data of your application. </li>\n<li>These classes are used to manage the <code>Cursor</code> object returned from a content provider query. </li>\n<li>Databases are usually created and opened with <code>openOrCreateDatabase(String, int, SQLiteDatabase.CursorFactory)</code> </li>\n<li>To make requests through content providers, you can use the <code>content.ContentResolver</code>class.</li>\n<li>All databases are stored on the device in <code>/data/data/&lt;package_name&gt;/databases</code></li>\n</ul>\n",
    "path": "05-databases/intro.md"
  },
  {
    "path": "04-intents/assignments.md"
  },
  {
    "title": "<strong>Intent</strong>",
    "heading": "h1",
    "content": "\n<p>Intents in Android are used as messaging objects. You will use intents whenever you want to get a task done by another part of the system. These tasks can range from starting another activity to starting a background service to download some data. We haven’t discussed Services and Broadcasts yet, so I will restrict these notes to starting new activities.</p>\n<p>Intents can be broadly classified into two categories:</p>\n<h3><strong>Explicit Intents: </strong></h3>\n<p>When we specify the exact activity class (or component) that should handle the intent. We will use this methodology to launch new activities within the app. For example, in our stocks app, when the user clicks on a company in the list we would like to show a detailed page to user. For this, we can create an explicit intent.</p>\n<p>Here is the sample code for that:</p>\n<pre><code class=\"lang-java\">Intent i =newIntent();\ni.setClass(getApplicationContext(), DetailedActivity.class);\nstartActivity(i);\n</code></pre>\n<p>Here in this code we created an intent and set the DetailedActivity class as the class, which should handle the intent. startActivity function is used to pass the intent to Android and start the transition. Instead of using setClass function, you could have used the setComponent, setClassName functions as well. To make this work, you would need to create a DetailedActivity class and add that activity to your manifest.xml file.</p>\n<h3><strong>Implicit Intents:</strong></h3>\n<p>Sometimes we don’t care which activity takes care of our intent. We just want some activity to handle the task at hand. For example, if user clicks on a website link in our app, we would like the link to be opened by a browser. We don’t really care which app is used to open the link, as long as it can take care of the task at hand.<br>In these cases, we won’t set the class that should handle the intent, instead we tell the task to be done and Android finds all the activities, which can handle it.</p>\n<p>Here are some attributes, which we can use to describe a task.</p>\n<p><strong>Action: </strong>This string specifies the generic action type. Action can be View or Send. For example, if you want to open a link in browser it will be <strong>ACTION_VIEW</strong> whereas to send an email you should use <strong>ACTION_SEND</strong>.</p>\n<p><strong>Data: </strong>Data is a Uri type object. It contains the details of the task to be done as well as the MIME (<a href=\"http://en.wikipedia.org/wiki/MIME\\\">http://en.wikipedia.org/wiki/MIME\\</a>) type of the task. For example, to open a website, we will set the data Uri to be “<a href=\"http://www.google.com”\">http://www.google.com”</a>.</p>\n<p>Here http:// is the MIME type, which tells Android that activities that can handle http data should be used to complete this task. Also <a href=\"http://www.google.com\">www.google.com</a> is the data that tells the target activity which website should be opened.</p>\n<p><strong>Category: </strong>This contains additional information about the activity to be launched.<br>For example, <strong>CATEGORY_DEFAULT</strong> tells that the activity to be launched should be an activity, which opens in standard full screen mode whereas <strong>CATEGORY_TAB</strong> tells that the activity should be launched as a tab in a TabActivity.</p>\n<p><strong>Type: </strong>This is the MIME type that we have already discussed while talking about data.<br>In case you don’t have any data to be passed you can use the setType function and just set the type of intent.</p>\n<p>Here are few examples of implicit Intents:</p>\n<p>Opening a link:</p>\n<pre><code>Intent i =newIntent();\ni.setAction(Intent.ACTION_VIEW);\nUri a = Uri.parse(&quot;http://www.google.com&quot;);\ni.setData(a);\nstartActivity(i);\n</code></pre><p>Email:</p>\n<pre><code>Intent i =newIntent (Intent.ACTION_SENDTO);\ni.setData(Uri.parse(&quot;mailto:ankush@codingblocks.com&quot;));\ni.putExtra(Intent.EXTRA_SUBJECT,&quot;subject&quot;);\nif(i.resolveActivity(getPackageManager()) !=null) {\n    startActivity(i);\n}\n</code></pre><p>In the second example, we first checked if the intent can be resolved by any of the applications installed by the user or not. We start the activity only if intent can be resolved, otherwise our app would have crashed.</p>\n<h3><strong>Receiving Intents (Intent Filters): </strong></h3>\n<p>As discussed while using implicit intents you can tell Android the kind of task you want to get done and it will find the activities that can take care of the task.<br>Now, if we build an activity which can take care of tasks, we would like Android to show our application as one of the options to the user.<br>In order to achieve this, we will be using Intent Filters.</p>\n<p>Intent Filters are added in the Manifest.xml file and from there Android can find out what kind of tasks can be taken care by which activity of our application.<br>For example, if we were building a browser and BrowserActivity is the class which can take open webpages, we can add following code in the manifest file.</p>\n<pre><code>&lt;activity android:name=&quot;.BrowserActivity&quot; android:label=&quot;Browser&quot;&gt;\n    &lt;intent-filter&gt;\n        &lt;action android:name=&quot;android.intent.action.VIEW&quot;/&gt;\n        &lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&gt;\n        &lt;data android:scheme=&quot;http&quot;/&gt;\n    &lt;/intent-filter&gt;\n&lt;/activity&gt;\n</code></pre><p>Here we are telling Android that we have an activity BrowserActivity that can take care of view action on data with MIME type http.<br>Default category is the category used by intents when we don’t mention any other category.<br>We can similarly add intent filters for various actions, MIME types and categories.</p>\n<h3><strong>Passing data between activities</strong></h3>\n<p><strong>Caller to callee: </strong></p>\n<p>A lot of times you would like to pass additional data to the target activity and the data can range from the database id of an object or other attributes that can be used by the target activity to show data.<br>The Intent class provides a bunch of putExtra functions, which can be used to pass different kind of data.<br>For example, in a stocks app we might want to pass the company’s ticker symbol to the detailed activity.</p>\n<p>Here is the sample code on caller side:</p>\n<pre><code class=\"lang-java\">Intent i =newIntent();\ni.setClass(getApplicationContext(), DetailedActivity.class);\ni.putExtra(&quot;company_name&quot;, c.name);\nstartActivity(i);\n</code></pre>\n<p>On the callee side we can use the getExtras function to get an object of class Bundle that contains all the extra data that was passed by the caller.</p>\n<p>Here is the sample code on callee side:</p>\n<pre><code class=\"lang-java\">Intent i = getIntent();\nBundle b = i.getExtras();\nString companyName = b.getString(&quot;company_name&quot;);\n</code></pre>\n<p><strong>Callee to Caller: </strong></p>\n<p>Not as common as the first case but sometimes we want the target activity to complete a task and return the result to us. For example, we may want to create a new activity where user can add a new company to list of companies. We might want this activity to return the data that user has entered and save the data in the original activity.<br>For cases like these, the caller need to use startActivityForResult function instead of the startActivity function.<br>Caller also needs to implement onActivityResult method, which gets called once the target activity finishes.</p>\n<p>Here are the functions:</p>\n<pre><code class=\"lang-java\">startActivityForResult(intent, requestCode);\nonActivityResult(int requestCode , int resultCode, Intent data);\n</code></pre>\n<p>Here the caller sets the requestCode and the callee sets the resultCode. These codes are used to differentiate between various possible intents that could have finished and to differentiate between different outcomes (like success or failure).<br>For example, our main activity could have called Activity A in one function and Activity B in some other function and Activity A in third function but this time for some other task. We could use the requestCode to differentiate between these three cases.</p>\n<p>On the callee side, you need to set the resultCode and data to be sent back.<br>You can add any kind of data to be sent back in intent extras, similar to what we did while sending data from caller to callee.</p>\n<pre><code class=\"lang-java\">Intent data =newIntent();\ndata.putExtras(“extra_data”, “done”);\nsetResult(resultCode, data);\n</code></pre>\n<p>You can add this code to finish() method of activity, which is called every time the activity is about to be finished.</p>\n",
    "path": "04-intents/implicit-and-explicit.md"
  },
  {
    "title": "Custom ListView &amp; Array Adapters",
    "heading": "h1",
    "content": "\n",
    "children": [
      {
        "title": "Understanding Custom Array Adapter",
        "heading": "h2",
        "content": "\n<p>If you have an array of general objects and want to display multiple items from each object or items which are Stings or not Strings then you need to create a custom ArrayAdapter.</p>\n<ul>\n<li>Build a new Android Project</li>\n<li>Open up <code>app - res - drawable</code> &amp; add any <code>Image</code>into it .</li>\n</ul>\n"
      },
      {
        "title": "Creating a Custom Layout",
        "heading": "h2",
        "content": "\n<ul>\n<li>Create a new Layout resource file.</li>\n</ul>\n<p>Open up <code>app - res - layout - new - Layout Resource File - custom_row</code></p>\n<ul>\n<li>Add an ImageView and a Text view and give them their respective Id&#39;s .</li>\n</ul>\n<p><code>custom_row.xml code here</code></p>\n"
      },
      {
        "title": "Creating a Custom Array Adapter",
        "heading": "h2",
        "content": "\n<ul>\n<li>Create a new Java class.</li>\n</ul>\n<p>Open up <code>app - java - new Java file</code></p>\n<p>Now, the first thing that we need to do is that we need to extend this class to an ArrayAdapter .</p>\n<pre><code class=\"lang-java\">class CustomAdapter extends ArrayAdapter&lt;String&gt; {\n}```\n\n* Create a constructor.\n\n* Inside your CustomAdapter class press ```Alt+Insert``` and go to ```constructor```\n\n* You&#39;ll get a constructor like this.\n\n```java\npublic CustomAdapter (Context context , int resource){\nsuper(context , resource);\n}\n```\n\n* Now, we will be making changes inside the constuctor itself.\n\n* Insted of the `int resource` we want to pass on the array which has our items.\n\n```java\npublic CustomAdapter (Context context , String[] fruits ){\n  super(context ,R.layout.custom_row, fruits);\n}\n```\n\n* Now we are going add override methods .\n\n* Go , outside of your constructor and `Alt+Insert` for `override methods`\n\n* Now , the method which we are overriding is `getView()`\n\n* Now, we are going to create a custom list adapter and going to associate with our array with that adapter , so all the items can be displayed in device screen .\n\n* Now , we need to initialize our view .\n\n```java\nLayoutInflater lf = LayoutInflater.from.(getcontext());\n```\n\n* Now , we need to initialize our customview .\n\n```java\nView CustomView = lf.inflate(R.layout.custom_row ,  parent , false);\n```\n\n* Now , the parameters it is going to take as input ,\n\n* R.layout.custom_row : our custom layout\n\n* parent : default parameter\n\n* false : default parameter\n\nNow we&#39;re going to create a ```String``` which is going to get the item depending upon it&#39;s position .\n\n```java\nString singleItem = getItem(position);\n```\n\n- Now the next thing which we&#39;ve to do is to get the reference of the `ImageView` as well as the `TextView`\n\n  ```java\n  TextView tv = (TextView)  CustomView.findViewById(R.id.text);\n  ImageView iv = (ImageView) CustomView.findViewById(R.id.image);\n  ```\n\n- Now we&#39;ve to set this text to this `singleitem` because the string which actually the item by using position.\n\n````java\ntv.setText(item);\niv.setImageResource(R.id.drawable.image)```\n</code></pre>\n"
      }
    ],
    "path": "03-list-view/03-1-custom-adapter.md"
  },
  {
    "title": "ListView &amp; Array Adapters",
    "heading": "h1",
    "content": "\n",
    "children": [
      {
        "title": "Understanding ListView .",
        "heading": "h2",
        "content": "\n<p>List View is used in order to create such a layout which has some content into it and the respective contents is</p>\n<p>displayed as a list .</p>\n<p>examples : Contacts , Gmail , Messages .</p>\n"
      },
      {
        "title": "Creating a List .",
        "heading": "h2",
        "content": "\n<ul>\n<li><p>Build a new Android project .</p>\n</li>\n<li><p>Open up <code>activity_main.xml</code> &amp; add <code>ListView</code> into it .</p>\n</li>\n<li><p>Set height and width to <code>match_parent</code> &amp; give that view a respective Id . (So , that your list can be displayed in full screen) .</p>\n</li>\n</ul>\n<p>Now , You&#39;ll get a list rendered on your design pane of the android .</p>\n<pre><code class=\"lang-xml\">    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n    &lt;RelativeLayout\n    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;\n    xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    tools:context=&quot;com.codingblocks_projects.stoned_coder.listview.MainActivity&quot;&gt;\n\n    &lt;ListView\n        android:id=&quot;@+id/listView&quot;\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;match_parent&quot;&gt;\n\n    &lt;/ListView&gt;\n\n    &lt;/RelativeLayout&gt;\n</code></pre>\n<p>Great , Now we&#39;ve a list view let&#39;s add the contents that you want to display into the list .</p>\n"
      },
      {
        "title": "Adding Contents to List",
        "heading": "h2",
        "content": "\n<ul>\n<li>Open up , <code>MainActivity.java</code> file and inside your <code>onCreate()</code> method create a <code>String[]</code> and name that as per your choice , and populate that <code>String</code> with some values .</li>\n</ul>\n<p><code>String[] fruits = {&quot;Peach&quot; , &quot;Mango&quot; , &quot;Apple&quot; , &quot;Kiwi&quot; , &quot;Orange&quot;};</code></p>\n<p>So , The problem occurs is that we can&#39;t arbitrarily add this <code>String[]</code> to the respective list view .</p>\n<p>In order to solve this issue there&#39;s an interface in android called <strong>ArrayAdapters</strong>.</p>\n<p>What <strong>ArrayAdapters</strong> does that it binds your values into the list view .</p>\n<p><code>ListAdapter fruits = new ArrayAdapter&lt;&gt;(this,android.R.layout.simple_list_item_1 , fruits);</code></p>\n<p>Now the arguments that this adapter takes ;</p>\n<ul>\n<li>this : this is a keyword used for getting the context .</li>\n<li>android.R.layout.android.R.layout.simple_list_item_1 : It&#39;s a simple list item stored in android by default</li>\n<li>fruits : respective <code>String[]</code> , which we want to get values from .</li>\n</ul>\n<p><strong>Setting up the Adapter</strong></p>\n<ul>\n<li><p>First you&#39;ve to get the reference of the respective ListView by calling <code>findViewById()</code> method.</p>\n</li>\n<li><p>Then you can simply set the adapter by calling <code>setadapter()</code> method , which takes one argument which is the adapter .</p>\n</li>\n</ul>\n<pre><code class=\"lang-java\">    ListView list = (ListView)findViewById(R.id.listView);\n    list.setAdapter(FruitsAdapter)\n</code></pre>\n<p>Now , when you run your application the list will come up on the device screen like this .</p>\n"
      }
    ],
    "path": "03-list-view/intro.md"
  },
  {
    "title": "Basic Android Widgets",
    "heading": "h1",
    "content": "\n<p>First, let us get down to the basics of the ways in which we can interact with a computer program.</p>\n<p>One way is that a program gives instructions to an user and the user follows them to get the desired output. Like what usually happens in our C/C++ programs. Consider a C++ program which asks the user for two amounts(have to be given for the program to proceed), and as soon as numbers enterd the program prints sum of those two amounts. In such cases the control of flow depends on the program hence, it is called program-driven approach.</p>\n<p>Another way in which we generally interact with the programs in our day to day life is that we see many options in the program and nothing happens until we perform any action/event. Like in an Android App or website, the result depends on the action we perform, and when we perform it like back button closes an app, clicking a button on screen might just open a new page. So basically, the output is dependent on action/event, and control of flow depends on the user hence such type of approach is called event-driven.</p>\n<p>So can you guess whether Android apps are program driven or event driven?\nIf your answer is event-driven then you are right. Android Apps are event-driven. Generally, most GUI applications are event-driven and perform an action after an event.</p>\n<p>As most of us have used GUI application, let us revise types of UI elements that are common and we can perform events on them.</p>\n<ul>\n<li>Buttons</li>\n<li>TextView(View Text)</li>\n<li>EditText(Fill in Text)</li>\n</ul>\n<p>List can go on, there are many more.</p>\n<p>Each UI element you see on your Android Screen is a component of view Class that is it extends from class View, be it a Button, TextView etc.\nFor example, a Button you see on your screen is defined in a class Button which extends from a class View in package android.widget.</p>\n<p>There are two ways to populate UI elements on the screen.</p>\n<ul>\n<li><p>Your application can create UI elements (and manipulate their properties) programmatically at runtime.</p>\n</li>\n<li><p>Defining UI elements in an XML file. The name of the tag is same as the name of the class of the particular view. The advantage to declaring your UI elements in XML is that it enables you to better separate the presentation of your application from the code that controls its behaviour.</p>\n</li>\n</ul>\n<p>In XML, we start each element with &#39;&lt;&#39; followed by name of a class that extends a View Class. Views like Button, EditText are defined inside OS, therefore, we don&#39;t have to specifically give a path to the class, we can use &#39;Button&#39;, &#39;EditText&#39; etc. After defining the UI element we necessarily have to define some attributes like element&#39;s height, width. And we can define some more attributes as per our need. The value for each attribute must be given in double quotes.</p>\n<p>Special Views which can have multiple views inside them are known as ViewGroups. Example layouts which contain these UI elements. We will talk about them in a separate article.</p>\n<p>There are some attributes which are common to each and every view defined in android. These are -</p>\n<p><strong>android:id</strong></p>\n<p>This attribute is used to declare a unique id for the particular element. The view can be referenced in code using this id like findViewById(R.id.givenId)(It returns a reference to the button). It is better to start id value with the name of the type of UI element. Example, in case of Button we can have id start with &#39;btn&#39; so we can easily identify button ids in our code.</p>\n<p><strong>android:layout_height</strong></p>\n<p>This tag is used to define the height of a widget. It can have three different values &#39;match_parent&#39;, &#39;wrap_content&#39; or custom size.</p>\n<ul>\n<li><p>match_parent means to take the full height of the parent layout.</p>\n</li>\n<li><p>wrap_content means that the view wants to be just big enough to enclose its content (plus padding)</p>\n</li>\n<li>Custom size can be in any unit like sp, dp(density-independent pixel), px(pixel). But in Android, it preferred to use dp as the size is independent of the screen pixel and can remain constant on different screens.</li>\n</ul>\n<p><strong>android:layout_width</strong></p>\n<p>This tag is used to define the width of a widget. It can be &#39;match_parent&#39;, &#39;wrap_content&#39; or custom size.</p>\n<ul>\n<li><p>match_parent means to take the full width of the parent layout.</p>\n</li>\n<li><p>wrap_content means that the view wants to be just big enough to enclose its content (plus padding)</p>\n</li>\n<li>Custom size can be in any unit like sp, dp(density-independent pixel), px(pixel). But in Android, it preferred to use dp as the size is independent of the screen pixel and can remain constant on different screens.</li>\n</ul>\n<p><strong>android:margin</strong> - Margin is the distance between parent element and the current element. It is given in dp. If only margin is used then all the four margins - marginTop, marginBottom, marginLeft, marginRight get the same vaue. These can be defined seperately as well.</p>\n<p><strong>android:padding</strong> - Padding is the distance between the border and the content of the element. It is given in dp. If only margin is used then all the four paddings - paddingTop, paddingBottom, paddingLeft, paddingRight get the same vaue. These can be defined seperately as well.</p>\n<p><img src=\"./img/download.jpeg\" alt=\"\">\n<img src=\"./img/mp2\" alt=\"\"></p>\n<p>Use of the above attributes will become more clear when we go through the specific examples.</p>\n<p>Some basic UI elements in Android, are known as Widgets and are defined in the package android.widget. These are explained below -</p>\n<h4>Textview</h4>\n<p>TextView is a widget in android to display plain text. TextView class directly inherits from View Class.</p>\n<pre><code class=\"lang-xml\">&lt;TextView\n        android:id=&quot;@+id/tvSomeText&quot;\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;Hey there&quot;\n        android:textColor=&quot;@android:color/black&quot;\n        android:textSize=&quot;12sp&quot;\n        android:textStyle=&quot;bold&quot; /&gt;\n</code></pre>\n<p>id for this TextView is &#39;tvSomeText&#39;. Its height and width is wrap_content.</p>\n<ul>\n<li><p><strong>android:text</strong> - This attribute defines the text inside a TextView.</p>\n</li>\n<li><p><strong>android:textColor</strong> - This attribute is for the color of the text. We can provide hex values like &quot;#ffffff&quot; or we can reference to color defined in color.xml like &quot;@color/black&quot; or we can use some default colors defined in android OS like &quot;@android:color/black&quot;</p>\n</li>\n<li><p><strong>android:textSize</strong> - It specifies the text size. It is generally defined is sp. sp stands for scalable-independent pixel. These are like dp but are affected by the font sizes defined by users in phone settings.</p>\n</li>\n<li><p><strong>android:text</strong> - Android provides three text styles by default normal, italics and bold.</p>\n</li>\n</ul>\n<h4>Button</h4>\n<p>A user interface element the user can tap or click to perform an action. Button class is child class of TextView.</p>\n<p>To display a button in an activity, add a button to the activity&#39;s layout XML file:</p>\n<pre><code class=\"lang-xml\">&lt;Button\n    android:id=&quot;@+id/btnSubmit&quot;\n    android:layout_height=&quot;wrap_content&quot;\n    android:layout_width=&quot;wrap_content&quot;\n    android:text=&quot;Submit&quot; /&gt;\n</code></pre>\n<p>id of the above declared button in XML is &#39;btnSubmit&#39;. We can reference this button in our code using findViewById(R.id.btnSubmit)</p>\n<p>Height and width of the button is wrap content. TextView being its parent class, all the TextView attributes work on button as well.</p>\n<ul>\n<li><p>android:text</p>\n<p>This attribute contains the text which needs to be displayed inside the button.</p>\n</li>\n</ul>\n<p>Button with width &#39;wrap_content&#39;\n<img src=\"./img/btn1.png\" alt=\"\"></p>\n<p>Button with width &#39;match_parent&#39;\n<img src=\"./img/btn2.png\" alt=\"\"></p>\n<h4>EditText</h4>\n<p>A user interface element for entering and modifying text. It also inherits from the TextView class.</p>\n<pre><code class=\"lang-xml\">&lt;EditText\n      android:id=&quot;@+id/etName&quot;\n      android:layout_width=&quot;match_parent&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:ems=&quot;10&quot;\n      android:hint=&quot;Name&quot;\n      android:inputType=&quot;textPersonName&quot; /&gt;\n</code></pre>\n<p>id for the above edit text is &#39;etName&#39;. Its width is &quot;match_parent&quot; that is it would take width of it parent layout, height is &quot;wrap_content&quot;.</p>\n<ul>\n<li><p><strong>android:ems</strong> - It specifies the maximum length of text that can be entered in the box. ems means the maximum count of &#39;m&#39; that can be a fitted in the edit text and &#39;m&#39; is used as it is the widest character.</p>\n</li>\n<li><p><strong>android:hint</strong> - It is the hint that sometimes appears on the text area to help the aid the user and is gone when we click on the edit text.</p>\n</li>\n<li><strong>android:inputType</strong> - It specifies the type of expected value in the text area. Like in this case, it is &#39;textPersonName&#39;. In other cases, it can be a number, password etc. These are predefined types provided by android.</li>\n</ul>\n<h4>ImageView</h4>\n<p>Displays image resources, for example Bitmap or Drawable resources. ImageView is also commonly used to apply tints to an image and handle image scaling. ImageView directly extends View.</p>\n<pre><code class=\"lang-xml\">&lt;ImageView\n        android:layout_width=&quot;100dp&quot;\n        android:layout_height=&quot;100dp&quot;\n        android:src=&quot;@mipmap/ic_launcher&quot;\n        android:scaleType=&quot;fitXY&quot;/&gt;\n</code></pre>\n<p>There are two attributes that we havent seen above -</p>\n<ul>\n<li><p><strong>android:src</strong> - It defines the location on the image in the resource folder, mipmap is a default folder which has a picture of default launcher icon with name &#39;ic_launcher&#39;, so the path is written as &quot;@mipmap/ic_launcher&quot;. We can put images in drawable folder in res, then the path would become like &quot;@drawable/pic_name&quot;</p>\n</li>\n<li><p><strong>android:scaleType</strong> - This is attribute specifies the scaling of a image inside the imageView. &quot;fitXY&quot; means image should fit into size 100dpX100dp</p>\n</li>\n</ul>\n<p><img src=\"./img/sc.png\" alt=\"\"></p>\n<p>In the due course, we will keep learning more tags and attributes.</p>\n",
    "path": "02-basic-widgets/basicandroidwidgets.md"
  },
  {
    "title": "Android Project Structure Simplified",
    "heading": "h1",
    "content": "\n<p>Switching from making a single file program to multi-file project can be a difficult task. Likewise new Android Developers usually gets confused seeing Android&#39;s multi-file project. This guide will help make transition easier by explaining each and every part of the Android Project Structure in detail.</p>\n<p>A project which consists of different type of files, requires a build tool to build the project. Build tools are programs that automate the creation of such executable applications from source code(e.g.apk for android app). Building incorporates compiling, linking and packaging the code into a usable or executable form.</p>\n<p>Various tools like Ninja, Maven, MAKE and Gradle can be used to build different type of projects. Earlier maven was used to build Android applications in Eclipse. Android applications at the OS level are built using MAKE. Generally, now we use Gradle to build Android applications.</p>\n<p>Gradle is also a build tool and it configures how an app is built. There are certain tasks which need to be performed to build an Android Application. These tasks include Javac compiling java files, encoding the XML files, compressing img etc. Gradle manages all this build system and performs these necessary tasks.</p>\n<p>Now we understand the role of Gradle in building an Android application, we can move to understand the basic project structure.</p>\n<p>The basic structure of an Android Application built using Gradle is shown below. It has many folders inside Project folder(AndroidDemo), we would study each of them in detail. (&#39;app&#39; folder is explained at the end)</p>\n<p><img src=\"img/projStructure.png\" alt=\"\"></p>\n",
    "children": [
      {
        "title": "<code>AndroidDemo</code> or <code>/</code>",
        "heading": "h2",
        "content": "\n<p>AndroidDemo is our project name. One project can have more than one application and module. By default, there is only one application in the &#39;app&#39; folder. You can add more apps in project folder. The reason we want our project to have more than one application is to share data among themselves.</p>\n",
        "children": [
          {
            "title": "<code>/.gradle</code>",
            "heading": "h3",
            "content": "\n<p>This is a hidden folder. It is used to store downloaded libraries and Gradle cache. It also contains Snapshots and other automatically generated files. Generally, there is no need to change anything in this folder.</p>\n"
          },
          {
            "title": "<code>/.idea</code>",
            "heading": "h3",
            "content": "\n<p>Android Studio is based on IntelliJ by Jetbrain. All IntelliJ IDEs store settings in &#39;.idea&#39; folder of the project. Example if you increase font for a particular file in Android Studio, the font size remains same when you open the file next time. All these types of settings are stored in this folder.</p>\n"
          },
          {
            "title": "<code>/bulid</code>",
            "heading": "h3",
            "content": "\n<p>When we build an android app various temporary files are generated like compiled files, compressed files. So these generated files are present in this folder. Build folder contents can be deleted to start a clean build a project.</p>\n"
          },
          {
            "title": "<code>/gradle</code>",
            "heading": "h3",
            "content": "\n<p><img src=\"img/gradle.png\" alt=\"\"></p>\n<p><img src=\"img/gradleWrapper.png\" alt=\"\">\n<a href=\"./AndroidDemo/gradle/wrapper/gradle-wrapper.properties\">File Link</a></p>\n<p>In Gradle folder, we have a wrapper folder, which has a file for gradle properties. It denotes the version of gradle that is to be used to build the project. Android Studio automatically makes it to the latest version available.</p>\n"
          },
          {
            "title": "<code>/gradle.properties</code>",
            "heading": "h3",
            "content": "\n<p>This file has gradle properties needed at the time of execution. Like you can set the RAM limit consumed by Gradle.</p>\n"
          },
          {
            "title": "<code>/build.gradle</code>",
            "heading": "h3",
            "content": "\n<p>We are depending on Gradle plugin to run our project. In this file, Gradle plugin version is mentioned for the whole project. Android Studio version and Gradle plugin version should be same. If you open an earlier project then this version should be changed to match the current Android Studio version.</p>\n"
          },
          {
            "title": "<code>/settings.gradle</code>",
            "heading": "h3",
            "content": "\n<p>In the project modules which are needed to be built are listed in this file. By default it only has &#39;app&#39;.</p>\n"
          },
          {
            "title": "<code>/app</code>",
            "heading": "h3",
            "content": "\n<p>This is the default application/module folder named as &#39;app&#39;. It has all the folders and files associated with our apllication.</p>\n<p><img src=\"img/app.png\" alt=\"\"></p>\n",
            "children": [
              {
                "title": "<code>/app/build.gradle</code>",
                "heading": "h4",
                "content": "\n<p><img src=\"img/appgradle.png\" alt=\"\"></p>\n<p>This is the Gradle file pertaining to the module. Gradle files are written in a language known as Groovy. The various components of the file are described below -</p>\n<ul>\n<li><p>&#39;<strong>android</strong>&#39; block contains information related to Android compiling. The &#39;compileSdkVersion&#39; is the version of the API the app is compiled against. This means you can use Android API features included in that version of the API. In this case, it is 26 corresponding to Android Oreo.</p>\n</li>\n<li><p>&#39;<strong>targetSdkVersion</strong>&#39; is the version for which the app has been tested.</p>\n</li>\n<li><p>&#39;<strong>minSdkversion</strong>&#39; is the minimum Android version in which the app will work. It has to do with whether the newer APIs are backward compatible with API level below the specified version.</p>\n</li>\n<li><p>&#39;<strong>versioncode</strong>&#39; is the current version of the app. This should be updated to release an update of the app otherwise play store wouldn&#39;t accept the apk. Users cannot see this on the play store.</p>\n</li>\n<li><p>&#39;<strong>versionName</strong>&#39; is the version name displayed to users on play store and it can be changed to anything.</p>\n</li>\n<li><p>&#39;<strong>dependencies</strong>&#39; block contains the external dependencies/modules we want to include in the current module. These are the external libraries which provide extra features to your application. By default appcompat-v7 is included for Appcompat class to back port the material design till SDK version 7. The version 26 should match with compiled SDK version and &#39;+&#39; indicates to automatically use the latest version of the library.</p>\n</li>\n</ul>\n"
              },
              {
                "title": "<code>/app/src</code>",
                "heading": "h4",
                "content": "\n<p>This folder contains all the source files of the project. MultiFlavor of the app.</p>\n<p><img src=\"img/src.png\" alt=\"\"></p>\n",
                "children": [
                  {
                    "title": "<code>/app/src/androidTest</code>",
                    "heading": "h5",
                    "content": "\n<p>This folder contains the test files written to test android functions.</p>\n"
                  },
                  {
                    "title": "<code>/app/src/test</code>",
                    "heading": "h5",
                    "content": "\n<p>This folder contains the test files written to test Java functions.</p>\n"
                  },
                  {
                    "title": "<code>/app/src/main</code>",
                    "heading": "h5",
                    "content": "\n<p>This contains the main source code of the application. Whenever an apk is generated it contains source code present in this folder. So this forms the core components of the app.</p>\n<p><img src=\"img/main.png\" alt=\"\"></p>\n",
                    "children": [
                      {
                        "title": "<code>/app/src/main/AndroidManifest.xml</code>",
                        "heading": "h6",
                        "content": "\n<p>It is the most important file for an Android App.Every application must have an AndroidManifest.xml file (with precisely that name) in its root directory. In an app Java or resource files are optional. Apps that run as service don&#39;t have any resource associated. Apps like launcher pack do not have any java files associated with them. But each of them has manifest attached to them.</p>\n<p>It is necessary to have a manifest for a valid android application.\nIt contains tags like application(So OS identify it as android application), package name, label (Name of application on launcher)</p>\n"
                      },
                      {
                        "title": "<code>/app/src/main/java</code>",
                        "heading": "h6",
                        "content": "\n<p>This folder contains all the Java (and these days Kotlin) source code files of our Android application.</p>\n"
                      },
                      {
                        "title": "<code>/app/src/main/res</code>",
                        "heading": "h6",
                        "content": "\n<p><img src=\"img/res.png\" alt=\"\"></p>\n<p>This contains all the resource files required in our application. The filse are logically segregated into their respective folders.</p>\n<ul>\n<li><p><strong>images</strong> needed in the app should be put in the drawable folder.\nimg required by the OS associated with our app are put in mipmap eg launcher Icon.</p>\n</li>\n<li><p><strong>layout</strong> folder contains the Android XML layout files which can be used in activities or fragment.</p>\n</li>\n<li><p><strong>values</strong> folder contains values like colors, dimension, string. These values can be referenced in our app java files.</p>\n</li>\n</ul>\n<p>We can also create environment specific resource folders. Environments include orientation of the phone, display density etc can be chosen from.\n  Folder name followed by a hyphen followed by a specifier is used to create such folders.\n  Eg. values-land, values defined in this folder would be specific to landscape orientation of the phone. For portrait mode default values in &#39;values&#39; folder will be used.\n  Specific folders just override the value if the phone is in that specific environment otherwise fall back to the default values.</p>\n"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "path": "01-project-structure/intro.md"
  },
  {
    "title": "Blocks of Android",
    "heading": "h1",
    "content": "\n<p>This book should be a comprehensive reference manual for learning Android App development.</p>\n<h1>Authors</h1>\n<p>This book was originally conceived and written at <strong><a href=\"https://codingblocks.com\">Coding Blocks</a></strong><br>Since this is open sourced, anyone can contribute to this book.</p>\n<p>Authors with most contributions are -</p>\n<ul>\n<li>Arnav Gupta</li>\n<li>Harshit Dwivedi</li>\n<li>Nimit Agarwal</li>\n<li>Harshita Jain</li>\n<li>Piyush Gupta</li>\n<li>Raunaq Verma</li>\n<li>Rishabh Khanna</li>\n</ul>\n",
    "path": "README.md"
  }
]